[{"id":"75754e68.a55af","type":"tab","label":"Start Tasks","disabled":false,"info":""},{"id":"f2ff6f77.dd264","type":"tab","label":"Chrome Puppeteer test","disabled":false,"info":""},{"id":"c3c859b0.7a16a8","type":"tab","label":"Facebook Accounts","disabled":true,"info":""},{"id":"25e0c6e7.7b804a","type":"tab","label":"Wait For Tasks","disabled":false,"info":""},{"id":"3153b58.481094a","type":"remote-server","z":"","name":"elasticsearch","host":"http://elasticsearch","port":"9200"},{"id":"c1d2aad5.c62ec8","type":"mongodb3","z":"","uri":"mongodb://mongodb-replicaset-mongodb-replicaset-0.mongodb-replicaset-mongodb-replicaset,mongodb-replicaset-mongodb-replicaset-1.mongodb-replicaset-mongodb-replicaset,mongodb-replicaset-mongodb-replicaset-2.mongodb-replicaset-mongodb-replicaset:27017/datagram","name":"mongodb","options":"","parallelism":"-1"},{"id":"ef31721b.a1642","type":"mongodb2","z":"","uri":"mongodb://mongodb-replicaset-mongodb-replicaset-0.mongodb-replicaset-mongodb-replicaset.default.svc.cluster.local:27017/datagram?replicaSet=rs0","name":"","options":"","parallelism":"-1"},{"id":"55a2f72f.71acd8","type":"kafka-broker","z":"","broker":"10.56.1.157:9092,10.56.1.158:9092","clientid":""},{"id":"baf2a4f6.c29108","type":"kafka-broker","z":"","broker":"zookeeper-zookeeper-0:2181,zookeeper-zookeeper-1:2181","clientid":""},{"id":"f49fd7e1.d07888","type":"kafka-broker","z":"","broker":"kafka-kafka-headless:9092","clientid":""},{"id":"2c2b843b.32f3fc","type":"kafka-broker","z":"","broker":"10.56.0.211:2181,10.56.1.154:2181","clientid":""},{"id":"85e43cb.44af3c","type":"kafka-broker","z":"","broker":"kafka-kafka.default.svc.cluster.local:9092","clientid":""},{"id":"17ca8ce.d30a173","type":"inject","z":"f2ff6f77.dd264","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":120,"y":100,"wires":[["7c655885.c88968"]]},{"id":"7c655885.c88968","type":"function","z":"f2ff6f77.dd264","name":"Search Google","func":"/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Search developers.google.com/web for articles tagged\n * \"Headless Chrome\" and scrape results from the results page.\n */\n\n'use strict';\n\nconst puppeteer = global.get('puppeteer');\n\n(async() => {\n  const browser = await puppeteer.launch({args: ['--no-sandbox', '--disable-setuid-sandbox']});\n  const page = await browser.newPage();\n\n  await page.goto('https://developers.google.com/web/');\n\n  // Type into search box.\n  await page.type('#searchbox input', 'Headless Chrome');\n\n  // Wait for suggest overlay to appear and click \"show all results\".\n  const allResultsSelector = '.devsite-suggest-all-results';\n  await page.waitForSelector(allResultsSelector);\n  await page.click(allResultsSelector);\n\n  // Wait for the results page to load and display the results.\n  const resultsSelector = '.gsc-results .gsc-thumbnail-inside a.gs-title';\n  await page.waitForSelector(resultsSelector);\n\n  // Extract the results from the page.\n  const links = await page.evaluate(resultsSelector => {\n    const anchors = Array.from(document.querySelectorAll(resultsSelector));\n    return anchors.map(anchor => {\n      const title = anchor.textContent.split('|')[0].trim();\n      return `${title} - ${anchor.href}`;\n    });\n  }, resultsSelector);\n  console.log(links.join('\\n'));\n  \n  await browser.close();\n  \n  msg.payload = links;\n  msg.topic = \"TASK_COMPLETED\";\n  node.send(msg);\n})();","outputs":1,"noerr":0,"x":380,"y":160,"wires":[["99469da6.6aaf"]]},{"id":"99469da6.6aaf","type":"switch","z":"f2ff6f77.dd264","name":"Topic Router","property":"topic","propertyType":"msg","rules":[{"t":"eq","v":"TASK_COMPLETED","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":590,"y":220,"wires":[["97f9ede7.842e4"]]},{"id":"97f9ede7.842e4","type":"debug","z":"f2ff6f77.dd264","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","x":790,"y":320,"wires":[]},{"id":"87d5f243.fa26a","type":"inject","z":"c3c859b0.7a16a8","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":"","x":140,"y":60,"wires":[["1d2d652e.68558b"]]},{"id":"ac8ae509.c273b8","type":"split","z":"c3c859b0.7a16a8","name":"","splt":"\\n","x":738.2500076293945,"y":63.25,"wires":[["159de87a.a69878"]]},{"id":"38dd5f3.f0f98a","type":"split","z":"c3c859b0.7a16a8","name":"For each account","splt":"\\n","x":150,"y":123,"wires":[["b490fb20.e5d0b8"]]},{"id":"159de87a.a69878","type":"switch","z":"c3c859b0.7a16a8","name":"","property":"parts.index","propertyType":"msg","rules":[{"t":"eq","v":"0","vt":"str"}],"checkall":"true","outputs":1,"x":869.7500114440918,"y":65,"wires":[["38dd5f3.f0f98a"]]},{"id":"3d35ae58.869b52","type":"http request","z":"c3c859b0.7a16a8","name":"Get Facebook active campaigns","method":"GET","ret":"obj","url":"https://graph.facebook.com/v2.10/act_{{{payload.id.S}}}/campaigns/?fields=effective_status&filtering=[{'field':'effective_status','operator':'IN','value':['ACTIVE']}]&access_token={{{payload.access_token.S}}}","tls":"","x":797,"y":122,"wires":[["56bc2eaf.c249f","58391c33.51dab4"]]},{"id":"56bc2eaf.c249f","type":"function","z":"c3c859b0.7a16a8","name":"build params","func":"msg.params = {}\n\nmsg.params.Item = {\n    \"id\": msg.fb_account.id,\n    \"campaigns\" : msg.payload.data,\n    \"access_token\": msg.fb_account.access_token\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":132,"y":183,"wires":[[]]},{"id":"f85162a8.4ace5","type":"function","z":"c3c859b0.7a16a8","name":"build fb_account","func":"msg.fb_account = {\n    \"id\": msg.payload.id.S,\n    \"access_token\": msg.payload.access_token.S\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":562,"y":122,"wires":[["3d35ae58.869b52"]]},{"id":"b490fb20.e5d0b8","type":"switch","z":"c3c859b0.7a16a8","name":"is access token null?","property":"payload.access_token","propertyType":"msg","rules":[{"t":"nnull"}],"checkall":"true","outputs":1,"x":355.5,"y":122,"wires":[["f85162a8.4ace5"]]},{"id":"ea470ae0.52e458","type":"http request","z":"c3c859b0.7a16a8","name":"Get Facebook insights","method":"GET","ret":"obj","url":"https://graph.facebook.com/v2.10/insights/?fields=impressions,campaign_id,campaign_name,adset_id,adset_name,ad_id,ad_name,spend,actions,action_values&date_preset=lifetime&level=ad&limit=10000&ids={{{campaign.id}}}&p=2&access_token={{{fb_account.access_token}}}","tls":"","x":475,"y":249.75000286102295,"wires":[["deda0664.2f06e8"]]},{"id":"f154246c.d02418","type":"function","z":"c3c859b0.7a16a8","name":"build campaigns","func":"msg.payload = msg.params.Item.campaigns;\n\ndelete msg.parts;\n\nreturn msg;","outputs":1,"noerr":0,"x":539,"y":183,"wires":[["c33faa55.e613a8"]]},{"id":"c33faa55.e613a8","type":"split","z":"c3c859b0.7a16a8","name":"","splt":"\\n","x":682.5,"y":183,"wires":[["8605f798.c83798"]]},{"id":"8605f798.c83798","type":"function","z":"c3c859b0.7a16a8","name":"build campaign","func":"msg.campaign = {\n    \"id\": msg.payload.id,\n    \"account\" : {\n        \"id\" : msg.fb_account.id\n    }\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":841,"y":184,"wires":[["6686f3d4.83643c"]]},{"id":"1d2d652e.68558b","type":"function","z":"c3c859b0.7a16a8","name":"set timestamp","func":"/*var message = msg;\n\nmsg = {};\n\nmsg.refferal_message = message;\n//msg.params = {};\n*/\n\nmsg.timestamp = new Date().getTime();//msg.payload;\n\nglobal.set(\"threshold\",5);\nglobal.set(\"sc_weight\",0.9);\n\nreturn msg;","outputs":1,"noerr":0,"x":341.5,"y":61.250000953674316,"wires":[[]]},{"id":"deda0664.2f06e8","type":"function","z":"c3c859b0.7a16a8","name":"Get campaign data","func":"msg.payload = msg.payload[msg.campaign.id].data;\n\nmsg.payload.forEach( function (ad){\n    for (var i = 0; i < msg.campaign.adsets.length; i++) {\n        if(ad.adset_id === msg.campaign.adsets[i].id){\n            \n            ad.adset_lifetime_budget = msg.campaign.adsets[i].lifetime_budget;\n            ad.adset_daily_budget = msg.campaign.adsets[i].daily_budget;\n            ad.adset_budget_remaining = msg.campaign.adsets[i].budget_remaining;\n\n        }\n    }\n});\n\nreturn msg;","outputs":1,"noerr":0,"x":620.5000076293945,"y":308.00000381469727,"wires":[["6ee70819.9a0558"]]},{"id":"6ee70819.9a0558","type":"join","z":"c3c859b0.7a16a8","name":"","mode":"auto","build":"merged","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","timeout":"","count":"","x":754.5000114440918,"y":253.25000381469727,"wires":[["8213ade1.01527"]]},{"id":"8213ade1.01527","type":"function","z":"c3c859b0.7a16a8","name":"aggregate insights","func":"msg.ads = [];\nmsg.adsets = [];\nmsg.campaigns = [];\nmsg.account = {\n                \"account_id\" : msg.campaign.account.id,\n                \"pre_conversions\" : 0,\n                \"conversions\" : 0,\n                \"revenue\" : 0\n            };\n\nvar pre_conversion_actions = [\"offsite_conversion.fb_pixel_complete_registration\"];\nvar conversion_actions = [\"offsite_conversion.fb_pixel_purchase\"];\nvar revenue_actions = [\"offsite_conversion.fb_pixel_search\"];\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    for (var j = 0; j < msg.payload[i].length; j++) {\n        \n        var actions = [];\n        var action_values = [];\n        \n        if(msg.payload[i][j].actions!==undefined) actions = msg.payload[i][j].actions;\n        if(msg.payload[i][j].action_values!==undefined) action_values = msg.payload[i][j].action_values;\n        \n        var ad = msg.payload[i][j];\n            \n        ad.pre_conversions = 0;\n        ad.conversions = 0;\n        ad.revenue = 0;\n        \n        actions.forEach( function (arrayItem)\n        {\n            if(pre_conversion_actions.indexOf(arrayItem.action_type)>=0 ){\n                ad.pre_conversions = ad.pre_conversions + parseInt(arrayItem.value);\n            }\n            \n            if(conversion_actions.indexOf(arrayItem.action_type)>=0 ){\n                ad.conversions = ad.conversions + parseInt(arrayItem.value);\n            }\n            \n        });\n        \n        action_values.forEach( function (arrayItem)\n        {\n            if(revenue_actions.indexOf(arrayItem.action_type)>=0 ){\n                ad.revenue = ad.revenue + parseInt(arrayItem.value);\n            }\n        });\n        \n        var adset = null;\n        \n        msg.adsets.forEach( function (obj){\n            try{\n                if (obj.adset_id == ad.adset_id){\n                    adset = obj;\n                }\n            }\n            catch(e){}\n        });\n        \n        if(adset===null){\n            msg.adsets.push({\n                \"adset_id\" : ad.adset_id,\n                \"pre_conversions\" : ad.pre_conversions,\n                \"conversions\" : ad.conversions,\n                \"revenue\" : ad.revenue,\n                \"lifetime_budget\" : msg.payload[i].lifetime_budget,\n                \"daily_budget\" : msg.payload[i].daily_budget,\n                \"budget_remaining\" : msg.payload[i].budget_remaining\n            });\n        }\n        else{\n            adset.pre_conversions = ad.pre_conversions + adset.pre_conversions;\n            adset.conversions = ad.conversions + adset.conversions;\n            adset.revenue = ad.revenue + adset.revenue;\n        }\n        \n        var campaign = null;\n        \n        msg.campaigns.forEach( function (obj){\n            try{\n                if (obj.campaign_id == ad.campaign_id){\n                    campaign = obj;\n                }\n            }\n            catch(e){}\n        });\n        \n        if(campaign===null){\n            msg.campaigns.push({\n                \"campaign_id\" : ad.campaign_id,\n                \"pre_conversions\" : ad.pre_conversions,\n                \"conversions\" : ad.conversions,\n                \"revenue\" : ad.revenue\n            });\n        }\n        else{\n            campaign.pre_conversions = ad.pre_conversions + campaign.pre_conversions;\n            campaign.conversions = ad.conversions + campaign.conversions;\n            campaign.revenue = ad.revenue + campaign.revenue;\n        }\n        \n        \n        msg.account.pre_conversions = ad.pre_conversions + msg.account.pre_conversions;\n        msg.account.conversions = ad.conversions + msg.account.conversions;\n        msg.account.revenue = ad.revenue + msg.account.revenue;\n        \n        \n        msg.ads.push(ad);\n        \n    }\n}\n\nmsg.payload = msg.ads;\n\nreturn msg;","outputs":1,"noerr":0,"x":949.5000076293945,"y":256.25000381469727,"wires":[["5d348570.66b15c"]]},{"id":"5d348570.66b15c","type":"split","z":"c3c859b0.7a16a8","name":"","splt":"\\n","x":144.75001525878906,"y":398.0000057220459,"wires":[["69e38715.cc0038"]]},{"id":"69e38715.cc0038","type":"function","z":"c3c859b0.7a16a8","name":"ad all hierarchy insights","func":"var ad = msg.payload;\n\nmsg.adsets.forEach( function (adset){\n    if (adset.adset_id == ad.adset_id){\n        ad.adset = adset;\n    }\n});\n\nmsg.campaigns.forEach( function (campaign){\n    if (campaign.campaign_id == ad.campaign_id){\n        ad.campaign = campaign;\n    }\n});\n\nad.account = msg.account;\n\nreturn msg;","outputs":1,"noerr":0,"x":348.75001525878906,"y":397.0000057220459,"wires":[["c483bfac.30caa"]]},{"id":"c483bfac.30caa","type":"function","z":"c3c859b0.7a16a8","name":"calc SCVal","func":"var ad = msg.payload;\n\nvar threshold = global.get(\"threshold\");\nvar sc_weight = global.get(\"sc_weight\");\n\nPad = Math.min(ad.conversions/threshold,1);\nRad = (ad.revenue/ad.pre_conversions);\nPadset = Math.min(ad.adset.conversions/threshold,1);\nRadset = (ad.adset.revenue/ad.adset.pre_conversions);\nCalcPadset = (Math.max(1-Pad,0)*Padset);\nPcampaign = Math.min(ad.campaign.conversions/threshold,1);\nRcampaign = (ad.campaign.revenue/ad.campaign.pre_conversions);\nPaccount = Math.min(ad.account.conversions/threshold,1);\nRaccount = (ad.account.revenue/ad.account.pre_conversions);\n\n/*SCVal = (Pad*Rad) + \n(CalcPadset*Radset) + \n((Math.max(1-Padset-CalcPadset,0)*Pcampaign)*Rcampaign) + \n((Math.max(1 - Padset -(Padset-CalcPadset)-(Math.max(1-Padset-CalcPadset,0)),0)*Paccount)*Raccount);\n*/\n\n/*=(B2*B3) + \n((Max(1-B2,0)*B4)*B5) + \n((Max(1-B2-((Max(1-B2,0)*B4)),0)*B6)*B7) + \n((Max(1-B2 -(B4-((Max(1-B2,0)*B4)))-(Max((Max(1-B2,0)*B4),0)),0)*B8)*B9)\n*/\n\n/*msg.debug = {\n    part1 : (Pad*Rad),\n    part2 : ((Math.max(1-Pad,0)*Padset)*Radset),\n    part3 : ((Math.max(1-Padset-((Max(1-Pad,0)*Padset)),0)*Pcampaign)*Rcampaign),\n    part4 : ((Math.max(1-Padset -(Padset-CalcPadset)-(Math.max(1-Padset-CalcPadset,0)),0)*Paccount)*Raccount)\n}*/\n\nad.Pad = isNaN(Pad) ? 0 : Pad;\nad.Rad = isNaN(Rad) ? 0 : Rad;\nad.Padset = isNaN(Padset) ? 0 : Padset;\nad.Radset = isNaN(Radset) ? 0 : Radset;\nad.Pcampaign = isNaN(Pcampaign) ? 0 : Pcampaign;\nad.Rcampaign = isNaN(Rcampaign) ? 0 : Rcampaign;\nad.Paccount = isNaN(Paccount) ? 0 : Paccount;\nad.Raccount = isNaN(Raccount) ? 0 : Raccount;\n\n\nad.debug = {\n    part1 : (ad.Pad*ad.Rad),\n    part2 : ((Math.max(1-ad.Pad,0)*ad.Padset)*ad.Radset),\n    part3 : ((Math.max(1-ad.Pad-((Math.max(1-ad.Pad,0)*ad.Padset)),0)*ad.Pcampaign)*ad.Rcampaign),\n    part4 : ((Math.max(1-ad.Pad -(ad.Padset-((Math.max(1-ad.Pad,0)*ad.Padset)))-(Math.max((Math.max(1-ad.Pad,0)*ad.Padset),0)),0)*ad.Paccount)*ad.Raccount)\n}\n\nSCVal = (ad.Pad*ad.Rad) +\n((Math.max(1-ad.Pad,0)*ad.Padset)*ad.Radset) +\n((Math.max(1-ad.Pad-((Math.max(1-ad.Pad,0)*ad.Padset)),0)*ad.Pcampaign)*ad.Rcampaign) + \n((Math.max(1-ad.Pad -(ad.Padset-((Math.max(1-ad.Pad,0)*ad.Padset)))-(Math.max((Math.max(1-ad.Pad,0)*ad.Padset),0)),0)*ad.Paccount)*ad.Raccount)\n\nad.SCVal = isNaN(SCVal) ? 0 : SCVal;\n\nVRevN = (SCVal * ad.pre_conversions * sc_weight) + ((1-sc_weight) * ad.revenue);\nad.VRevN = isNaN(VRevN) ? 0 : VRevN;\n\nad.timestamp = msg.timestamp;\n\nmsg.params = {\n    \"Item\" : ad\n}\n\n\nreturn msg;","outputs":1,"noerr":0,"x":553.7500152587891,"y":396.0000057220459,"wires":[["e8620043.cca18"]]},{"id":"4e367980.defff8","type":"http in","z":"c3c859b0.7a16a8","name":"","url":"/sippycup/ads/fetch","method":"get","swaggerDoc":"","x":177.75000381469727,"y":530.2500114440918,"wires":[["1488d61f.d6b1ea"]]},{"id":"637f4dd8.6dfe04","type":"http response","z":"c3c859b0.7a16a8","name":"","x":3128.00004196167,"y":174.5,"wires":[]},{"id":"4f8ad96d.42f1c8","type":"function","z":"c3c859b0.7a16a8","name":"set payload with params.Item","func":"msg.payload = msg.params.Item;\n\nreturn msg;","outputs":1,"noerr":0,"x":982.7500152587891,"y":395.0000057220459,"wires":[["dd41ace6.2962f"]]},{"id":"e3abc60d.160838","type":"debug","z":"c3c859b0.7a16a8","name":"","active":true,"console":"false","complete":"payload","x":614.2500076293945,"y":977.7500133514404,"wires":[]},{"id":"dd41ace6.2962f","type":"function","z":"c3c859b0.7a16a8","name":"set default values","func":"msg.payload = msg.params.Item;\nmsg.db_payload = msg.payload\n\nmsg.db_payload.impressions===undefined ? 0 : msg.db_payload.impressions\nmsg.db_payload.campaign_id===undefined ? \"\" : msg.db_payload.campaign_id\nmsg.db_payload.campaign_name===undefined ? \"\" : msg.db_payload.campaign_name\nmsg.db_payload.adset_id===undefined ? \"\" : msg.db_payload.adset_id\nmsg.db_payload.adset_name===undefined ? \"\" : msg.db_payload.adset_name\nmsg.db_payload.ad_id===undefined ? \"\" : msg.db_payload.ad_id\nmsg.db_payload.ad_name===undefined ? \"\" : msg.db_payload.ad_name\nmsg.db_payload.spend===undefined ? 0 : msg.db_payload.spend\nmsg.db_payload.date_start===undefined ? \"\" : msg.db_payload.date_start\nmsg.db_payload.date_stop===undefined ? \"\" : msg.db_payload.date_stop\nmsg.db_payload.pre_conversions===undefined ? 0 : msg.db_payload.pre_conversions\nmsg.db_payload.conversions===undefined ? 0 : msg.db_payload.conversions\nmsg.db_payload.revenue===undefined ? 0 : msg.db_payload.revenue\nmsg.db_payload.adset.adset_id===undefined ? \"\" : msg.db_payload.adset.adset_id\nmsg.db_payload.adset.pre_conversions===undefined ? 0 : msg.db_payload.adset.pre_conversions\nmsg.db_payload.adset.conversions===undefined ? 0 : msg.db_payload.adset.conversions\nmsg.db_payload.adset.revenue===undefined ? 0 : msg.db_payload.adset.revenue\nmsg.db_payload.campaign.pre_conversions===undefined ? 0 : msg.db_payload.campaign.pre_conversions\nmsg.db_payload.campaign.conversions===undefined ? 0 : msg.db_payload.campaign.conversions\nmsg.db_payload.campaign.revenue===undefined ? 0 : msg.db_payload.campaign.revenue\nmsg.db_payload.account.account_id===undefined ? 0 : msg.db_payload.account.account_id\nmsg.db_payload.account.pre_conversions===undefined ? 0 : msg.db_payload.account.pre_conversions\nmsg.db_payload.account.conversions===undefined ? 0 : msg.db_payload.account.conversions\nmsg.db_payload.account.revenue===undefined ? 0 : msg.db_payload.account.revenue\nmsg.db_payload.Pad===undefined ? 0 : msg.db_payload.Pad\nmsg.db_payload.Rad===undefined ? 0 : msg.db_payload.Rad\nmsg.db_payload.Padset===undefined ? 0 : msg.db_payload.Padset\nmsg.db_payload.Radset===undefined ? 0 : msg.db_payload.Radset\nmsg.db_payload.Pcampaign===undefined ? 0 : msg.db_payload.Pcampaign\nmsg.db_payload.Rcampaign===undefined ? 0 : msg.db_payload.Rcampaign\nmsg.db_payload.Paccount===undefined ? 0 : msg.db_payload.Paccount\nmsg.db_payload.Raccount===undefined ? 0 : msg.db_payload.Raccount\nmsg.db_payload.debug.part1===undefined ? 0 : msg.db_payload.debug.part1\nmsg.db_payload.debug.part2===undefined ? 0 : msg.db_payload.debug.part2\nmsg.db_payload.debug.part3===undefined ? 0 : msg.db_payload.debug.part3\nmsg.db_payload.debug.part4===undefined ? 0 : msg.db_payload.debug.part4\nmsg.db_payload.SCVal===undefined ? 0 : msg.db_payload.SCVal\nmsg.db_payload.VRevN===undefined ? 0 : msg.db_payload.VRevN\nmsg.db_payload.timestamp===undefined ? 0 : msg.db_payload.timestamp\nmsg.db_payload.adset_lifetime_budget===undefined ? 0 : msg.db_payload.adset_lifetime_budget\nmsg.db_payload.adset_daily_budget===undefined ? 0 : msg.db_payload.adset_daily_budget\n\nreturn msg;","outputs":1,"noerr":0,"x":1256.8750228881836,"y":316.5000057220459,"wires":[["22632631.ea189a"]]},{"id":"22632631.ea189a","type":"template","z":"c3c859b0.7a16a8","name":"insert incremental_ad_data","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"(\n  {{db_payload.impressions}},\n  '{{db_payload.campaign_id}}',\n  '{{db_payload.campaign_name}}',\n  '{{db_payload.adset_id}}',\n  '{{db_payload.adset_name}}',\n  '{{db_payload.ad_id}}',\n  '{{db_payload.ad_name}}',\n  {{db_payload.spend}},\n  '{{db_payload.date_start}}',\n  '{{db_payload.date_stop}}',\n  {{db_payload.pre_conversions}},\n  {{db_payload.conversions}},\n  {{db_payload.revenue}},\n  '{{db_payload.adset.adset_id}}',\n  {{db_payload.adset.pre_conversions}},\n  {{db_payload.adset.conversions}},\n  {{db_payload.adset.revenue}},\n  {{db_payload.campaign.pre_conversions}},\n  {{db_payload.campaign.conversions}},\n  {{db_payload.campaign.revenue}},\n  '1381220405489176',\n  {{db_payload.account.pre_conversions}},\n  {{db_payload.account.conversions}},\n  {{db_payload.account.revenue}},\n  {{db_payload.Pad}},\n  {{db_payload.Rad}},\n  {{db_payload.Padset}},\n  {{db_payload.Radset}},\n  {{db_payload.Pcampaign}},\n  {{db_payload.Rcampaign}},\n  {{db_payload.Paccount}},\n  {{db_payload.Raccount}},\n  {{db_payload.debug.part1}},\n  {{db_payload.debug.part2}},\n  {{db_payload.debug.part3}},\n  {{db_payload.debug.part4}},\n  {{db_payload.SCVal}},\n  {{db_payload.VRevN}},\n  {{db_payload.timestamp}},\n  {{db_payload.adset_lifetime_budget}},\n  {{db_payload.adset_daily_budget}}\n)","x":1552.5000228881836,"y":300.25000381469727,"wires":[["d97db4df.4e0818"]]},{"id":"d97db4df.4e0818","type":"join","z":"c3c859b0.7a16a8","name":"","mode":"custom","build":"string","property":"payload","propertyType":"msg","key":"topic","joiner":",","timeout":"","count":"","x":1686.8750228881836,"y":352.75000762939453,"wires":[["fb9e2699.9bfd98"]]},{"id":"fb9e2699.9bfd98","type":"template","z":"c3c859b0.7a16a8","name":"","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"INSERT INTO sippycup.incremental_ad_data\n(\n  impressions,\n  campaign_id,\n  campaign_name,\n  adset_id,\n  adset_name,\n  ad_id,\n  ad_name,\n  spend,\n  date_start,\n  date_stop,\n  pre_conversions,\n  conversions,\n  revenue,\n  adset_adset_id,\n  adset_pre_conversions,\n  adset_conversions,\n  adset_revenue,\n  campaign_pre_conversions,\n  campaign_conversions,\n  campaign_revenue,\n  account_id,\n  account_pre_conversions,\n  account_conversions,\n  account_revenue,\n  pad,\n  rad,\n  padset,\n  radset,\n  pcampaign,\n  rcampaign,\n  paccount,\n  raccount,\n  debug_part1,\n  debug_part2,\n  debug_part3,\n  debug_part4,\n  scval,\n  vrev,\n  TIMESTAMP,\n  adset_lifetime_budget,\n  adset_daily_budget\n)\nVALUES {{payload}};","x":1765.6250228881836,"y":295.25000953674316,"wires":[["abcbcdc.5fe3a3"]]},{"id":"abcbcdc.5fe3a3","type":"function","z":"c3c859b0.7a16a8","name":"","func":"msg.payload = msg.payload.replace(/&#39;/g,\"'\")\n\nreturn msg;","outputs":1,"noerr":0,"x":1888.1250343322754,"y":296.50000381469727,"wires":[["e8ff3a.9da450c8"]]},{"id":"cc53a0af.fb7cd","type":"template","z":"c3c859b0.7a16a8","name":"insert adset_inc_cf","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"insert into sippycup.adset_inc_cf\nselect  account_id,\n        campaign_id,\n        adset_id,\n        max(last_7_days_acc_spend)last_7_days_acc_spend,\n        sum(lifetime_spend) lifetime_spend,\n        sum(previous_spend) previous_spend,\n        sum(delta_spend) delta_spend,\n        sum(lifetime_pre_conversions) lifetime_pre_conversions,\n        sum(previous_pre_conversions) previous_pre_conversions,\n        sum(delta_pre_conversions) delta_pre_conversions,\n        max(last_7_days_acc_pre_conversions) last_7_days_acc_pre_conversions,\n        sum(lifetime_revenue) lifetime_revenue,\n        sum(delta_revenue) delta_revenue,\n        sum(lifetime_conversions) lifetime_conversions,\n        sum(delta_conversions) delta_conversions,\n        sum(SCVal) lifetime_SCVal,\n        sum(VRev_ad_inc) VRev_adset_inc,\n        sum(pre_conversion_cpa) pre_conversion_cpa,\n        0.6 target_roi,\n        ((case when sum(delta_spend)>0 then sum(VRev_ad_inc) else 0 end)/(case when sum(delta_spend)>0 then sum(delta_spend) else 1 end)/0.6) CF_inc,\n        timestamp,\n        previous_timestamp,\n        is_valid\nfrom (\nselect *,(VRev_ratio*delta_pre_conversions*SCVal) + (delta_revenue*(1-VRev_ratio)) VRev_ad_inc\nfrom (\nselect *,(case when ((-0.003*delta_spend) + 0.9)<0.3 then 0.3 else ((-0.003*delta_spend) + 0.9) end) VRev_ratio\nfrom (\n\nselect \n      account_id,\n      campaign_id,\n      adset_id,\n      ad_id,\n      last_7_days_acc_spend,\n      current_spend lifetime_spend,\n      previous_spend,\n      current_spend - previous_spend delta_spend ,\n      current_pre_conversions lifetime_pre_conversions,\n      previous_pre_conversions,\n      current_pre_conversions-previous_pre_conversions delta_pre_conversions,\n      last_7_days_acc_pre_conversions,\n      current_revenue lifetime_revenue,\n      current_revenue - previous_revenue delta_revenue, \n      current_conversions lifetime_conversions,\n      current_conversions - previous_conversions delta_conversions,\n      current_SCVal SCVal,\n      timestamp,\n      previous_timestamp,\n      is_valid,\n      pre_conversion_cpa\nfrom (\nselect current_data.account_id,\n        current_data.campaign_id,\n        current_data.adset_id,\n        current_data.ad_id,\n        last_7_days_acc_spend,\n        last_7_days_acc_pre_conversions,\n        current_data.spend - previous_data.spend delta_spend,\n        current_data.spend current_spend,\n        current_data.pre_conversions current_pre_conversions,\n        current_data.revenue current_revenue,\n        current_data.conversions current_conversions,\n        current_data.SCVal current_SCVal,\n        previous_data.spend previous_spend,\n        previous_data.pre_conversions previous_pre_conversions,\n        previous_data.revenue previous_revenue,\n        previous_data.conversions previous_conversions,\n        previous_data.SCVal previous_SCVal,\n        previous_data.rnk previous_version,\n        row_number() over(partition by current_data.account_id,current_data.campaign_id,current_data.adset_id,current_data.ad_id order by previous_data.rnk asc ) rnk,\n        current_data.timestamp,\n        previous_data.timestamp previous_timestamp,\n        (case when last_7_days_acc_pre_conversions>0 then last_7_days_acc_data.last_7_days_acc_spend else 0 end)/(case when last_7_days_acc_pre_conversions>0 then last_7_days_acc_pre_conversions else 1 end) pre_conversion_cpa,\n      case when (current_data.spend - previous_data.spend) > (((case when last_7_days_acc_pre_conversions>0 then last_7_days_acc_data.last_7_days_acc_spend else 0 end)/(case when last_7_days_acc_pre_conversions>0 then last_7_days_acc_pre_conversions else 1 end))*5) then true else false end is_valid\nfrom (\n            select account_id,campaign_id,adset_id,ad_id,spend,pre_conversions,revenue,conversions,SCVal,timestamp\n            from sippycup.incremental_ad_data\n            where timestamp={{timestamp}}) current_data\nleft join (\n            select account_id,campaign_id,adset_id,ad_id,spend,pre_conversions,revenue,conversions,SCVal,rnk,timestamp\n            from (\n            select incremental_ad_data.*,row_number() over(partition by incremental_ad_data.campaign_id,incremental_ad_data.adset_id,incremental_ad_data.ad_id \n                                                            order by \n                                                            (case when COALESCE(adset_inc_cf.is_valid,false) = true then 1 else -1 end) * incremental_ad_data.timestamp desc) rnk\n            from sippycup.incremental_ad_data\n            left join sippycup.adset_inc_cf\n              on incremental_ad_data.adset_id = adset_inc_cf.adset_id and\n                 incremental_ad_data.campaign_id = adset_inc_cf.campaign_id and\n                 incremental_ad_data.account_id = adset_inc_cf.account_id\n            where incremental_ad_data.timestamp<{{timestamp}}) a\n            where rnk =1) previous_data\non current_data.ad_id = previous_data.ad_id and\n   current_data.adset_id = previous_data.adset_id and\n   current_data.campaign_id = previous_data.campaign_id and\n   current_data.account_id = previous_data.account_id\nleft join (\n            select account_id,sum(max_last_7_days_acc_spend-min_last_7_days_acc_spend) last_7_days_acc_spend,sum(max_last_7_days_acc_pre_conversions-min_last_7_days_acc_pre_conversions) last_7_days_acc_pre_conversions\n            from (\n              select account_id,ad_id,min(spend) min_last_7_days_acc_spend,max(spend) max_last_7_days_acc_spend,\n                                      min(pre_conversions) min_last_7_days_acc_pre_conversions,max(pre_conversions) max_last_7_days_acc_pre_conversions\n              from sippycup.incremental_ad_data\n              where DATE_PART('hour', (current_TIMESTAMP) - (TIMESTAMP 'epoch' + (incremental_ad_data.timestamp/1000) * INTERVAL '1 second'))<=(7*24)\n              group by account_id,ad_id\n              ) last_7_days_acc_data\n            group by account_id\n          ) last_7_days_acc_data\non last_7_days_acc_data.account_id = current_data.account_id) a\n--where rnk=1\n\n\n\n) current_data\n/*where spend>0*/) a\n/*inner join (select distinct account_id,adset_id, ad_id\nfrom sippycup.incremental_ad_data) adsets\non a.ad_id = adsets.ad_id and a.account_id = adsets.account_id*/) b\ngroup by account_id,campaign_id,adset_id,timestamp,previous_timestamp,is_valid\norder by account_id,campaign_id,adset_id,timestamp,previous_timestamp,is_valid\n","x":2112.500030517578,"y":301.5000057220459,"wires":[["34a956bc.476bca","f7d9b70e.ab0dd8"]]},{"id":"5c7b22e2.fa60cc","type":"inject","z":"c3c859b0.7a16a8","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":170.625,"y":859.0000057220459,"wires":[["dcbbff17.7a323"]]},{"id":"34a956bc.476bca","type":"function","z":"c3c859b0.7a16a8","name":"","func":"var pg = global.get('pg');\n \n// create a config to configure both pooling behavior \n// and client options \n// note: all config is optional and the environment variables \n// will be read if the config is not present \nvar config = {\n  user: 'root', //env var: PGUSER \n  database: 'sippycup', //env var: PGDATABASE \n  password: 'lioran020', //env var: PGPASSWORD \n  host: 'sippycup.c8wilxdbvlmp.us-east-1.rds.amazonaws.com', // Server hosting the postgres database \n  port: 5432, //env var: PGPORT \n  max: 10, // max number of clients in the pool \n  idleTimeoutMillis: 30000, // how long a client is allowed to remain idle before being closed \n};\n \n//this initializes a connection pool \n//it will keep idle connections open for 30 seconds \n//and set a limit of maximum 10 idle clients \nvar pool = new pg.Pool(config);\n \n// to run a query we can acquire a client from the pool, \n// run a query on the client, and then return the client to the pool \npool.connect(function(err, client, done) {\n    node.warn('connecting to pg')\n  if(err) {\n    return node.warn('error fetching client from pool', err);\n  }\n  client.query(msg.payload, function(err, result) {\n    //call `done(err)` to release the client back to the pool (or destroy it if there is an error) \n    done(err);\n    node.warn('done')\n    if(err) {\n      return node.error('error running query : ' + err);\n    }\n    \n    node.warn(result)\n    msg.payload = result\n    msg.topic = \"save-inc-cf\"\n    node.warn('sending message')\n    node.send(msg)\n    //node.warn(result.rows[0].number);\n    //output: 1 \n  });\n});\n \npool.on('error', function (err, client) {\n  // if an error is encountered by a client while it sits idle in the pool \n  // the pool itself will emit an error event with both the error and \n  // the client which emitted the original error \n  // this is a rare occurrence but can happen if there is a network partition \n  // between your application and the database, the database restarts, etc. \n  // and so you might want to handle it and at least log it out \n  node.error('idle client error', err.message, err.stack)\n})","outputs":1,"noerr":0,"x":2291.2500381469727,"y":301.50000381469727,"wires":[["b00a8b3f.da86c8","65763da8.175624"]]},{"id":"e8ff3a.9da450c8","type":"function","z":"c3c859b0.7a16a8","name":"","func":"var pg = global.get('pg');\n \n// create a config to configure both pooling behavior \n// and client options \n// note: all config is optional and the environment variables \n// will be read if the config is not present \nvar config = {\n  user: 'root', //env var: PGUSER \n  database: 'sippycup', //env var: PGDATABASE \n  password: 'lioran020', //env var: PGPASSWORD \n  host: 'sippycup.c8wilxdbvlmp.us-east-1.rds.amazonaws.com', // Server hosting the postgres database \n  port: 5432, //env var: PGPORT \n  max: 10, // max number of clients in the pool \n  idleTimeoutMillis: 30000, // how long a client is allowed to remain idle before being closed \n};\n \n//this initializes a connection pool \n//it will keep idle connections open for 30 seconds \n//and set a limit of maximum 10 idle clients \nvar pool = new pg.Pool(config);\n \n// to run a query we can acquire a client from the pool, \n// run a query on the client, and then return the client to the pool \npool.connect(function(err, client, done) {\n    node.warn('connecting to pg')\n  if(err) {\n    return node.warn('error fetching client from pool', err);\n  }\n  client.query(msg.payload, function(err, result) {\n    //call `done(err)` to release the client back to the pool (or destroy it if there is an error) \n    done(err);\n    node.warn('done')\n    if(err) {\n      return node.error('error running query', err);\n    }\n    \n    node.warn(result)\n    msg.payload = result\n    msg.payload.timestamp = msg.timestamp\n    msg.topic = \"save-inc-data\"\n    node.warn('sending message')\n    node.send(msg)\n    //node.warn(result.rows[0].number);\n    //output: 1 \n  });\n});\n \npool.on('error', function (err, client) {\n  // if an error is encountered by a client while it sits idle in the pool \n  // the pool itself will emit an error event with both the error and \n  // the client which emitted the original error \n  // this is a rare occurrence but can happen if there is a network partition \n  // between your application and the database, the database restarts, etc. \n  // and so you might want to handle it and at least log it out \n  node.error('idle client error', err.message, err.stack)\n})","outputs":1,"noerr":0,"x":1936.2500267028809,"y":424.0000066757202,"wires":[["f034181.70921e8"]]},{"id":"f034181.70921e8","type":"switch","z":"c3c859b0.7a16a8","name":"","property":"topic","propertyType":"msg","rules":[{"t":"eq","v":"save-inc-data","vt":"str"}],"checkall":"true","outputs":1,"x":2036.8750305175781,"y":567.7500057220459,"wires":[["70028007.dd4b5"]]},{"id":"b00a8b3f.da86c8","type":"debug","z":"c3c859b0.7a16a8","name":"","active":true,"console":"false","complete":"true","x":2411.8750076293945,"y":411.5,"wires":[]},{"id":"f7d9b70e.ab0dd8","type":"debug","z":"c3c859b0.7a16a8","name":"","active":false,"console":"false","complete":"true","x":2276.8750343322754,"y":521.5000076293945,"wires":[]},{"id":"1488d61f.d6b1ea","type":"change","z":"c3c859b0.7a16a8","name":"is http","rules":[{"t":"set","p":"is_http","pt":"msg","to":"true","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":234.37500381469727,"y":476.5000057220459,"wires":[["1d2d652e.68558b"]]},{"id":"f0f071a3.7a256","type":"switch","z":"c3c859b0.7a16a8","name":"","property":"is_http","propertyType":"msg","rules":[{"t":"neq","v":"undefined","vt":"jsonata"},{"t":"else"}],"checkall":"true","outputs":2,"x":3031.87504196167,"y":294.00000190734863,"wires":[["637f4dd8.6dfe04"],[]]},{"id":"b031cc05.3f07e","type":"function","z":"c3c859b0.7a16a8","name":"","func":"var pg = global.get('pg');\n \n// create a config to configure both pooling behavior \n// and client options \n// note: all config is optional and the environment variables \n// will be read if the config is not present \nvar config = {\n  user: 'root', //env var: PGUSER \n  database: 'sippycup', //env var: PGDATABASE \n  password: 'lioran020', //env var: PGPASSWORD \n  host: 'sippycup.c8wilxdbvlmp.us-east-1.rds.amazonaws.com', // Server hosting the postgres database \n  port: 5432, //env var: PGPORT \n  max: 10, // max number of clients in the pool \n  idleTimeoutMillis: 30000, // how long a client is allowed to remain idle before being closed \n};\n \n//this initializes a connection pool \n//it will keep idle connections open for 30 seconds \n//and set a limit of maximum 10 idle clients \nvar pool = new pg.Pool(config);\n \n// to run a query we can acquire a client from the pool, \n// run a query on the client, and then return the client to the pool \npool.connect(function(err, client, done) {\n    //node.warn('connecting to pg')\n  if(err) {\n    return node.warn('error fetching client from pool', err);\n  }\n  client.query(msg.payload, function(err, result) {\n    //call `done(err)` to release the client back to the pool (or destroy it if there is an error) \n    done(err);\n    //node.warn('done')\n    if(err) {\n      return node.error('error running query : ' + err);\n    }\n    \n    //node.warn(result)\n    msg.payload = result.rows\n    msg.topic = \"get-inc-cf\"\n    //node.warn('sending message')\n    node.send(msg)\n    //node.warn(result.rows[0].number);\n    //output: 1 \n  });\n});\n \npool.on('error', function (err, client) {\n  // if an error is encountered by a client while it sits idle in the pool \n  // the pool itself will emit an error event with both the error and \n  // the client which emitted the original error \n  // this is a rare occurrence but can happen if there is a network partition \n  // between your application and the database, the database restarts, etc. \n  // and so you might want to handle it and at least log it out \n  node.error('idle client error', err.message, err.stack)\n})\n\nreturn msg;","outputs":1,"noerr":0,"x":2480.6250381469727,"y":296.50000381469727,"wires":[["5f429f05.1d526"]]},{"id":"65763da8.175624","type":"template","z":"c3c859b0.7a16a8","name":"insert adset_final_cf","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"insert into sippycup.adset_final_cf\nselect final_adset_inc_cf.*\nfrom (\nselect *,\n  ((cf0 * slot_weight * slot0_weight) + ((spend0/last_6_total_spend) * spend_weight)) +\n  ((cf1 * slot_weight * slot1_weight) + ((spend1/last_6_total_spend) * spend_weight)) +\n  ((cf2 * slot_weight * slot2_weight) + ((spend2/last_6_total_spend) * spend_weight)) +\n  ((cf3 * slot_weight * slot3_weight) + ((spend3/last_6_total_spend) * spend_weight)) +\n  ((cf4 * slot_weight * slot4_weight) + ((spend4/last_6_total_spend) * spend_weight)) +\n  ((cf5 * slot_weight * slot5_weight) + ((spend5/last_6_total_spend) * spend_weight)) final_cf\nfrom (\nselect \n      account_id,\n      campaign_id,\n      adset_id,\n      timestamp,\n      COALESCE(spend0,0.0) spend0,\n      COALESCE(cf0,0.0) cf0,\n      COALESCE(spend1,0.0) spend1,\n      COALESCE(cf1,0.0) cf1,\n      COALESCE(spend2,0.0) spend2,\n      COALESCE(cf2,0.0) cf2,\n      COALESCE(spend3,0.0) spend3,\n      COALESCE(cf3,0.0) cf3,\n      COALESCE(spend4,0.0) spend4,\n      COALESCE(cf4,0.0) cf4,\n      COALESCE(spend5,0.0) spend5,\n      COALESCE(cf5,0.0) cf5,\n      COALESCE(spend0,0) + COALESCE(spend1,0) + COALESCE(spend2,0) + COALESCE(spend3,0) + COALESCE(spend4,0) + COALESCE(spend5,0) last_6_total_spend, \n      0.7 slot_weight,\n      0.3 spend_weight,\n      0.5 slot0_weight,\n      0.3 spend0_weight,\n      0.7 slot1_weight,\n      0.3 spend1_weight,\n      0.7 slot2_weight,\n      0.3 spend2_weight,\n      0.7 slot3_weight,\n      0.3 spend3_weight,\n      0.7 slot4_weight,\n      0.3 spend4_weight,\n      0.7 slot5_weight,\n      0.3 spend5_weight \nfrom(\nSELECT \n      account_id,\n      campaign_id,\n      adset_id,\n      max(timestamp) \"timestamp\",\n      sum(case when version=1 then delta_spend else null end) spend0,\n      sum(case when version=1 then cf_inc else null end) cf0,\n      sum(case when version=2 then delta_spend else null end) spend1,\n      sum(case when version=2 then cf_inc else null end) cf1,\n      sum(case when version=3 then delta_spend else null end) spend2,\n      sum(case when version=3 then cf_inc else null end) cf2,\n      sum(case when version=4 then delta_spend else null end) spend3,\n      sum(case when version=4 then cf_inc else null end) cf3,\n      sum(case when version=5 then delta_spend else null end) spend4,\n      sum(case when version=5 then cf_inc else null end) cf4,\n      sum(case when version=6 then delta_spend else null end) spend5,\n      sum(case when version=6 then cf_inc else null end) cf5\nfrom (\n  select *\n       ,row_number() over(partition by account_id,campaign_id,adset_id order by timestamp desc) \"version\"\n  FROM sippycup.adset_inc_cf \n  where is_valid = true) adset_inc_cf\nwhere version<=6\ngroup by account_id,\n      campaign_id,\n      adset_id--,timestamp\n      ) agg_adset_inc_cf) final_adset_inc_cf) final_adset_inc_cf\nleft join sippycup.adset_final_cf\n  on adset_final_cf.account_id = final_adset_inc_cf.account_id and \n      adset_final_cf.campaign_id = final_adset_inc_cf.campaign_id and \n      adset_final_cf.adset_id = final_adset_inc_cf.adset_id and\n      adset_final_cf.timestamp = final_adset_inc_cf.timestamp\nwhere  final_adset_inc_cf.account_id is null;","x":2361.8750381469727,"y":225.25000381469727,"wires":[["b031cc05.3f07e"]]},{"id":"813ba6d6.dfefc8","type":"switch","z":"c3c859b0.7a16a8","name":"","property":"topic","propertyType":"msg","rules":[{"t":"eq","v":"get-final-cf","vt":"str"}],"checkall":"true","outputs":1,"x":2908.7500381469727,"y":295.25000190734863,"wires":[["f0f071a3.7a256"]]},{"id":"903dbd13.7a1c1","type":"debug","z":"c3c859b0.7a16a8","name":"","active":true,"console":"false","complete":"payload","x":1410.625015258789,"y":436.5000057220459,"wires":[]},{"id":"1e2e6a1c.4c3236","type":"template","z":"c3c859b0.7a16a8","name":"","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"select *\nfrom sippycup.incremental_ad_data\nleft join sippycup.adset_inc_cf\n  on incremental_ad_data.account_id = adset_inc_cf.account_id and \n      incremental_ad_data.campaign_id = adset_inc_cf.campaign_id and \n      incremental_ad_data.adset_id = adset_inc_cf.adset_id and\n      incremental_ad_data.timestamp = adset_inc_cf.timestamp \nleft join sippycup.adset_final_cf\n  on adset_final_cf.account_id = adset_inc_cf.account_id and \n      adset_final_cf.campaign_id = adset_inc_cf.campaign_id and \n      adset_final_cf.adset_id = adset_inc_cf.adset_id and\n      adset_final_cf.timestamp = adset_inc_cf.timestamp \nwhere DATE_PART('hour', (current_TIMESTAMP) - (TIMESTAMP 'epoch' + (incremental_ad_data.timestamp/1000) * INTERVAL '1 second'))<=(1*1)\norder by incremental_ad_data.account_id,\n      incremental_ad_data.campaign_id,\n      incremental_ad_data.adset_id,\n      incremental_ad_data.timestamp desc\n\n/*select adset_inc_cf.*,\n    spend0,\n    cf0,\n    spend1,\n    cf1,\n    spend2,\n    cf2,\n    spend3,\n    cf3,\n    spend4,\n    cf4,\n    spend5,\n    cf5,\n    last_6_total_spend,\n    final_cf\nfrom sippycup.adset_inc_cf \n    left join adset_final_cf\non adset_final_cf.account_id = adset_inc_cf.account_id and \n      adset_final_cf.campaign_id = adset_inc_cf.campaign_id and \n      adset_final_cf.adset_id = adset_inc_cf.adset_id and\n      adset_final_cf.timestamp = adset_inc_cf.timestamp    \nwhere adset_inc_cf.timestamp={{timestamp}}*/","x":2707.5000381469727,"y":226.50000286102295,"wires":[["fa95db20.9ef048"]]},{"id":"fa95db20.9ef048","type":"function","z":"c3c859b0.7a16a8","name":"","func":"var pg = global.get('pg');\n \n// create a config to configure both pooling behavior \n// and client options \n// note: all config is optional and the environment variables \n// will be read if the config is not present \nvar config = {\n  user: 'root', //env var: PGUSER \n  database: 'sippycup', //env var: PGDATABASE \n  password: 'lioran020', //env var: PGPASSWORD \n  host: 'sippycup.c8wilxdbvlmp.us-east-1.rds.amazonaws.com', // Server hosting the postgres database \n  port: 5432, //env var: PGPORT \n  max: 10, // max number of clients in the pool \n  idleTimeoutMillis: 30000, // how long a client is allowed to remain idle before being closed \n};\n \n//this initializes a connection pool \n//it will keep idle connections open for 30 seconds \n//and set a limit of maximum 10 idle clients \nvar pool = new pg.Pool(config);\n \n// to run a query we can acquire a client from the pool, \n// run a query on the client, and then return the client to the pool \npool.connect(function(err, client, done) {\n    //node.warn('connecting to pg')\n  if(err) {\n    return node.warn('error fetching client from pool', err);\n  }\n  client.query(msg.payload, function(err, result) {\n    //call `done(err)` to release the client back to the pool (or destroy it if there is an error) \n    done(err);\n    //node.warn('done')\n    if(err) {\n      return node.error('error running query : ' + err);\n    }\n    \n    //node.warn(result)\n    msg.payload = result.rows\n    msg.topic = \"get-final-cf\"\n    //node.warn('sending message')\n    node.send(msg)\n    //node.warn(result.rows[0].number);\n    //output: 1 \n  });\n});\n \npool.on('error', function (err, client) {\n  // if an error is encountered by a client while it sits idle in the pool \n  // the pool itself will emit an error event with both the error and \n  // the client which emitted the original error \n  // this is a rare occurrence but can happen if there is a network partition \n  // between your application and the database, the database restarts, etc. \n  // and so you might want to handle it and at least log it out \n  node.error('idle client error', err.message, err.stack)\n})\n\nreturn msg;","outputs":1,"noerr":0,"x":2783.7500381469727,"y":296.50000381469727,"wires":[["813ba6d6.dfefc8"]]},{"id":"5f429f05.1d526","type":"switch","z":"c3c859b0.7a16a8","name":"","property":"topic","propertyType":"msg","rules":[{"t":"eq","v":"get-inc-cf","vt":"str"}],"checkall":"true","outputs":1,"x":2606.2500381469727,"y":296.50000381469727,"wires":[["1e2e6a1c.4c3236"]]},{"id":"dcbbff17.7a323","type":"template","z":"c3c859b0.7a16a8","name":"get rows","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"select distinct timestamp\nfrom sippycup.incremental_ad_data\nwhere (TIMESTAMP 'epoch' + (incremental_ad_data.timestamp/1000) * INTERVAL '1 second')>='2017-05-01'\norder by timestamp","x":296.25001525878906,"y":746.5000095367432,"wires":[["f7356b09.9fcc38"]]},{"id":"f7356b09.9fcc38","type":"function","z":"c3c859b0.7a16a8","name":"","func":"var pg = global.get('pg');\n \n// create a config to configure both pooling behavior \n// and client options \n// note: all config is optional and the environment variables \n// will be read if the config is not present \nvar config = {\n  user: 'root', //env var: PGUSER \n  database: 'sippycup', //env var: PGDATABASE \n  password: 'lioran020', //env var: PGPASSWORD \n  host: 'sippycup.c8wilxdbvlmp.us-east-1.rds.amazonaws.com', // Server hosting the postgres database \n  port: 5432, //env var: PGPORT \n  max: 10, // max number of clients in the pool \n  idleTimeoutMillis: 300000000, // how long a client is allowed to remain idle before being closed \n};\n \n//this initializes a connection pool \n//it will keep idle connections open for 30 seconds \n//and set a limit of maximum 10 idle clients \nvar pool = new pg.Pool(config);\n \n// to run a query we can acquire a client from the pool, \n// run a query on the client, and then return the client to the pool \npool.connect(function(err, client, done) {\n    //node.warn('connecting to pg')\n  if(err) {\n    return node.warn('error fetching client from pool', err);\n  }\n  client.query(msg.payload, function(err, result) {\n    //call `done(err)` to release the client back to the pool (or destroy it if there is an error) \n    done(err);\n    //node.warn('done')\n    if(err) {\n      return node.error('error running query : ' + err);\n    }\n    \n    //node.warn(result)\n    msg.payload = result.rows\n    msg.topic = \"get-rows\"\n    //node.warn('sending message')\n    node.send(msg)\n    //node.warn(result.rows[0].number);\n    //output: 1 \n  });\n});\n \npool.on('error', function (err, client) {\n  // if an error is encountered by a client while it sits idle in the pool \n  // the pool itself will emit an error event with both the error and \n  // the client which emitted the original error \n  // this is a rare occurrence but can happen if there is a network partition \n  // between your application and the database, the database restarts, etc. \n  // and so you might want to handle it and at least log it out \n  node.error('idle client error', err.message, err.stack)\n})","outputs":1,"noerr":0,"x":441.25000762939453,"y":734.0000095367432,"wires":[["629ae75b.6e8358"]]},{"id":"629ae75b.6e8358","type":"switch","z":"c3c859b0.7a16a8","name":"","property":"topic","propertyType":"msg","rules":[{"t":"eq","v":"get-rows","vt":"str"}],"checkall":"true","outputs":1,"x":582.5,"y":735.25,"wires":[["e3abc60d.160838","138fc50f.93fa0b"]]},{"id":"70028007.dd4b5","type":"template","z":"c3c859b0.7a16a8","name":"","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"select sippycup.adset_calc_cf({{payload.timestamp}}::bigint)","x":2133.7500228881836,"y":645.2500095367432,"wires":[["bfc2a78a.ecce28"]]},{"id":"bfc2a78a.ecce28","type":"function","z":"c3c859b0.7a16a8","name":"","func":"var pg = global.get('pg');\n \n// create a config to configure both pooling behavior \n// and client options \n// note: all config is optional and the environment variables \n// will be read if the config is not present \nvar config = {\n  user: 'root', //env var: PGUSER \n  database: 'sippycup', //env var: PGDATABASE \n  password: 'lioran020', //env var: PGPASSWORD \n  host: 'sippycup.c8wilxdbvlmp.us-east-1.rds.amazonaws.com', // Server hosting the postgres database \n  port: 5432, //env var: PGPORT \n  max: 10, // max number of clients in the pool \n  idleTimeoutMillis: 600000, // how long a client is allowed to remain idle before being closed \n};\n \n//this initializes a connection pool \n//it will keep idle connections open for 30 seconds \n//and set a limit of maximum 10 idle clients \nvar pool = new pg.Pool(config);\n \n// to run a query we can acquire a client from the pool, \n// run a query on the client, and then return the client to the pool \npool.connect(function(err, client, done) {\n    node.warn('connecting to pg')\n  if(err) {\n    return node.warn('error fetching client from pool', err);\n  }\n  client.query(msg.payload, function(err, result) {\n    //call `done(err)` to release the client back to the pool (or destroy it if there is an error) \n    done(err);\n    node.warn('done')\n    if(err) {\n      return node.error('error running query : ' + err);\n    }\n    \n    node.warn(result)\n    msg.payload = result\n    msg.topic = \"update-rows\"\n    node.warn('sending message')\n    node.send(msg)\n    //node.warn(result.rows[0].number);\n    //output: 1 \n  });\n});\n \npool.on('error', function (err, client) {\n  // if an error is encountered by a client while it sits idle in the pool \n  // the pool itself will emit an error event with both the error and \n  // the client which emitted the original error \n  // this is a rare occurrence but can happen if there is a network partition \n  // between your application and the database, the database restarts, etc. \n  // and so you might want to handle it and at least log it out \n  node.error('idle client error', err.message, err.stack)\n})","outputs":1,"noerr":0,"x":2228.7500228881836,"y":705.2500095367432,"wires":[["8755789.96b8188"]]},{"id":"8755789.96b8188","type":"switch","z":"c3c859b0.7a16a8","name":"","property":"topic","propertyType":"msg","rules":[{"t":"eq","v":"update-rows","vt":"str"}],"checkall":"true","outputs":1,"x":2318.750026702881,"y":645.2500095367432,"wires":[["4368c7ee.0f2e58"]]},{"id":"4368c7ee.0f2e58","type":"debug","z":"c3c859b0.7a16a8","name":"","active":true,"console":"false","complete":"true","x":2607.5000381469727,"y":812.7500114440918,"wires":[]},{"id":"297d7225.b66f7e","type":"template","z":"c3c859b0.7a16a8","name":"VACUUM FULL","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"VACUUM FULL VERBOSE;","x":2480.0000343322754,"y":622.7500095367432,"wires":[["928cc694.e90508"]]},{"id":"928cc694.e90508","type":"function","z":"c3c859b0.7a16a8","name":"","func":"var pg = global.get('pg');\n \n// create a config to configure both pooling behavior \n// and client options \n// note: all config is optional and the environment variables \n// will be read if the config is not present \nvar config = {\n  user: 'root', //env var: PGUSER \n  database: 'sippycup', //env var: PGDATABASE \n  password: 'lioran020', //env var: PGPASSWORD \n  host: 'sippycup.c8wilxdbvlmp.us-east-1.rds.amazonaws.com', // Server hosting the postgres database \n  port: 5432, //env var: PGPORT \n  max: 10, // max number of clients in the pool \n  idleTimeoutMillis: 600000, // how long a client is allowed to remain idle before being closed \n};\n \n//this initializes a connection pool \n//it will keep idle connections open for 30 seconds \n//and set a limit of maximum 10 idle clients \nvar pool = new pg.Pool(config);\n \n// to run a query we can acquire a client from the pool, \n// run a query on the client, and then return the client to the pool \npool.connect(function(err, client, done) {\n    node.warn('connecting to pg')\n  if(err) {\n    return node.warn('error fetching client from pool', err);\n  }\n  client.query(msg.payload, function(err, result) {\n    //call `done(err)` to release the client back to the pool (or destroy it if there is an error) \n    done(err);\n    node.warn('done')\n    if(err) {\n      return node.error('error running query : ' + err);\n    }\n    \n    node.warn(result)\n    msg.payload = result\n    msg.topic = \"vaccum\"\n    node.warn('sending message')\n    node.send(msg)\n    //node.warn(result.rows[0].number);\n    //output: 1 \n  });\n});\n \npool.on('error', function (err, client) {\n  // if an error is encountered by a client while it sits idle in the pool \n  // the pool itself will emit an error event with both the error and \n  // the client which emitted the original error \n  // this is a rare occurrence but can happen if there is a network partition \n  // between your application and the database, the database restarts, etc. \n  // and so you might want to handle it and at least log it out \n  node.error('idle client error', err.message, err.stack)\n})","outputs":1,"noerr":0,"x":2542.500026702881,"y":710.2500114440918,"wires":[["9d88b3d.4546d5"]]},{"id":"9d88b3d.4546d5","type":"switch","z":"c3c859b0.7a16a8","name":"","property":"topic","propertyType":"msg","rules":[{"t":"eq","v":"vaccum","vt":"str"}],"checkall":"true","outputs":1,"x":2667.500030517578,"y":640.2500114440918,"wires":[["4368c7ee.0f2e58","f0f071a3.7a256"]]},{"id":"97bc4647.7f8648","type":"catch","z":"c3c859b0.7a16a8","name":"","scope":null,"x":654.3750038146973,"y":1099,"wires":[[]]},{"id":"ac22d444.448aa8","type":"e-mail","z":"c3c859b0.7a16a8","server":"smtp.gmail.com","port":"465","name":"avigershon@gmail.com","dname":"","x":885.6250152587891,"y":1080.2500076293945,"wires":[]},{"id":"18a091f9.ac450e","type":"template","z":"c3c859b0.7a16a8","name":"REINDEX sippycup","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"REINDEX DATABASE sippycup","x":378.12503814697266,"y":852.7500123977661,"wires":[[]]},{"id":"a919e77b.ede3e8","type":"delay","z":"c3c859b0.7a16a8","name":"","pauseType":"rate","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"5","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":854.375,"y":805.25,"wires":[["70028007.dd4b5"]]},{"id":"138fc50f.93fa0b","type":"split","z":"c3c859b0.7a16a8","name":"","splt":"\\n","x":733.1250114440918,"y":735.2500104904175,"wires":[["a919e77b.ede3e8"]]},{"id":"996d7c8.bcbc18","type":"inject","z":"c3c859b0.7a16a8","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":210,"y":954,"wires":[["18a091f9.ac450e"]]},{"id":"55daf64e.53ecc8","type":"http in","z":"c3c859b0.7a16a8","name":"","url":"/sippycup/adset/latest","method":"get","swaggerDoc":"","x":181.7857208251953,"y":582.7499809265137,"wires":[["82074097.bc3f"]]},{"id":"82074097.bc3f","type":"change","z":"c3c859b0.7a16a8","name":"is http","rules":[{"t":"set","p":"is_http","pt":"msg","to":"true","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":388.75,"y":600.25,"wires":[["24b3cc17.418224"]]},{"id":"24b3cc17.418224","type":"template","z":"c3c859b0.7a16a8","name":"get rows","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"select *,case when new_daily_budget_in_dollars < today_adset_spend then today_adset_spend else new_daily_budget_in_dollars end final_new_daily_budget_in_dollars\nfrom (\n\nselect *,\n(GREATEST(case when campaign_type='ROAS' then ROAS_min_safe_budget else CPA_min_safe_budget end, \n(case when (lifetime_spend > 2*(last_7_days_acc_spend/last_7_days_acc_conversions) and lifetime_conversions = 0) or\n    (lifetime_spend > 3*(last_7_days_acc_spend/last_7_days_acc_conversions) and lifetime_conversions <=1) then\n  0\nelse \n  case when lifetime_spend<200 then\n    --KSM\n    case when campaign_type='ROAS' then\n      --ROAS\n      case when lifetime_conversions>0 and last_7_days_acc_revenue>0 and \n          (lifetime_spend / lifetime_conversions) > (last_7_days_acc_revenue / last_7_days_acc_conversions / target_roi) * GREATEST((-0.00125 * lifetime_spend)+1.35,1.1) then \n        case when daily_budget_in_dollars < 100 then\n          0\n        else \n          case when final_cf>1 then \n            final_cf\n          else\n            power(final_cf,3)\n          end\n        end\n      end\n    else\n      --CPA\n      case when lifetime_conversions>0 and \n          (lifetime_spend / lifetime_conversions) > 1 * GREATEST((-0.00125 * lifetime_spend)+1.35,1.0) then \n        case when daily_budget_in_dollars < 100 then\n          0\n        else \n          case when final_cf>1 then \n            final_cf\n          else\n            power(final_cf,3)\n          end\n        end\n      end\n    end\n  else\n    --Last X Days KM\n    case when campaign_type='ROAS' then\n      --ROAS\n      case when last_x_days_adset_spend>0 and\n          (last_x_days_adset_revenue / last_x_days_adset_spend) < target_roi then \n        case when daily_budget_in_dollars < 100 then\n          0\n        else \n          case when final_cf>1 then \n            final_cf\n          else\n            power(final_cf,3)\n          end\n        end\n      end\n    else\n      --CPA\n      1\n    end\n  end\nend) * (daily_budget_in_dollars-today_adset_spend)) + today_adset_spend) new_daily_budget_in_dollars,\n'GREATEST(case when campaign_type[=' || campaign_type || ']=''ROAS'' then ROAS_min_safe_budget[=' || trim(to_char(ROAS_min_safe_budget,'99999999999999999D99')) || '] else CPA_min_safe_budget[=' || trim(to_char(CPA_min_safe_budget,'99999999999999999D99')) || '] end, \n(case when (lifetime_spend[=' || trim(to_char(lifetime_spend,'99999999999999999D99')) || '] > 2*(last_7_days_acc_spend[=' || trim(to_char(last_7_days_acc_spend,'99999999999999999D99')) || ']/last_7_days_acc_conversions[=' || trim(to_char(last_7_days_acc_conversions,'99999999999999999D99')) || '])[=' || trim(to_char(2*(last_7_days_acc_spend/last_7_days_acc_conversions),'99999999999999999D99')) || '] and lifetime_conversions[=' || trim(to_char(lifetime_conversions,'99999999999999999D99')) || '] = 0) or\n    (lifetime_spend[=' || trim(to_char(lifetime_spend,'99999999999999999D99')) || '] > 3*(last_7_days_acc_spend[=' || trim(to_char(last_7_days_acc_spend,'99999999999999999D99')) || ']/last_7_days_acc_conversions[=' || trim(to_char(last_7_days_acc_conversions,'99999999999999999D99')) || '])[=' || trim(to_char(3*(last_7_days_acc_spend/last_7_days_acc_conversions),'99999999999999999D99')) || '] and lifetime_conversions[=' || trim(to_char(lifetime_conversions,'99999999999999999D99')) || '] <=1) then\n  0\nelse \n  case when lifetime_spend[=' || trim(to_char(lifetime_spend,'99999999999999999D99')) || ']<200 then\n    --KSM\n    case when campaign_type[=' || campaign_type || ']=''ROAS'' then\n      --ROAS\n      case when lifetime_conversions[=' || trim(to_char(lifetime_conversions,'99999999999999999D99')) || ']>0 and last_7_days_acc_revenue[=' || trim(to_char(last_7_days_acc_revenue,'99999999999999999D99')) || ']>0 and \n          (lifetime_spend[=' || trim(to_char(lifetime_spend,'99999999999999999D99')) || '] / lifetime_conversions[=' || trim(to_char(lifetime_conversions,'99999999999999999D99')) || ']) (lifetime_spend / lifetime_conversions)[=' || trim(to_char(lifetime_conversions,'99999999999999999D99')) || '] > (last_7_days_acc_revenue[=' || trim(to_char(last_7_days_acc_revenue,'99999999999999999D99')) || '] / last_7_days_acc_conversions[=' || trim(to_char(last_7_days_acc_conversions,'99999999999999999D99')) || '] / target_roi[=' || trim(to_char(target_roi,'99999999999999999D99')) || '])[=' || trim(to_char((last_7_days_acc_revenue / last_7_days_acc_conversions / target_roi),'99999999999999999D99')) || '] * GREATEST((-0.00125 * lifetime_spend[=' || trim(to_char(lifetime_spend,'99999999999999999D99')) || '])+1.35,1.1)[=' || trim(to_char(GREATEST((-0.00125 * lifetime_spend)+1.35,1.1),'99999999999999999D99')) || '] then \n        case when daily_budget_in_dollars[=' || trim(to_char(daily_budget_in_dollars,'99999999999999999D99')) || '] < 100 then\n          0\n        else \n          case when final_cf[=' || trim(to_char(final_cf,'99999999999999999D99')) || ']>1 then \n            final_cf[=' || trim(to_char(final_cf,'99999999999999999D99')) || ']\n          else\n            power(final_cf,3)[=' || trim(to_char(power(final_cf,3),'99999999999999999D99')) || ']\n          end\n        end\n      end\n    else\n      --CPA\n      case when lifetime_conversions[=' || trim(to_char(lifetime_conversions,'99999999999999999D99')) || ']>0 and \n          (lifetime_spend[=' || trim(to_char(lifetime_spend,'99999999999999999D99')) || '] / lifetime_conversions[=' || trim(to_char(lifetime_conversions,'99999999999999999D99')) || ']) > 1 * GREATEST((-0.00125 * lifetime_spend[=' || trim(to_char(lifetime_spend,'99999999999999999D99')) || '])+1.35,1.0)[=' || trim(to_char(GREATEST((-0.00125 * lifetime_spend)+1.35,1.1),'99999999999999999D99')) || '] then \n        case when daily_budget_in_dollars[=' || trim(to_char(daily_budget_in_dollars,'99999999999999999D99')) || '] < 100 then\n          0\n        else \n          case when final_cf[=' || trim(to_char(final_cf,'99999999999999999D99')) || ']>1 then \n            final_cf[=' || trim(to_char(final_cf,'99999999999999999D99')) || ']\n          else\n            power(final_cf,3)[=' || trim(to_char(power(final_cf,3),'99999999999999999D99')) || ']\n          end\n        end\n      end\n    end\n  else\n    --Last X Days KM\n    case when campaign_type[=' || campaign_type || ']=''ROAS'' then\n      --ROAS\n      case when last_x_days_adset_spend[=' || trim(to_char(last_x_days_adset_spend,'99999999999999999D99')) || ']>0 and\n          (last_x_days_adset_revenue[=' || trim(to_char(last_x_days_adset_revenue,'99999999999999999D99')) || '] / last_x_days_adset_spend[=' || trim(to_char(last_x_days_adset_spend,'99999999999999999D99')) || ']) < target_roi[=' || trim(to_char(target_roi,'99999999999999999D99')) || '] then \n        case when daily_budget_in_dollars[=' || trim(to_char(daily_budget_in_dollars,'99999999999999999D99')) || '] < 100 then\n          0\n        else \n          case when final_cf[=' || trim(to_char(final_cf,'99999999999999999D99')) || ']>1 then \n            final_cf[=' || trim(to_char(final_cf,'99999999999999999D99')) || ']\n          else\n            power(final_cf,3)[=' || trim(to_char(power(final_cf,3),'99999999999999999D99')) || ']\n          end\n        end\n      end\n    else\n      --CPA\n      1\n    end\n  end\nend) * daily_budget_in_dollars[=' || trim(to_char(daily_budget_in_dollars,'99999999999999999D99')) || ']-today_adset_spend[=' || trim(to_char(today_adset_spend,'99999999999999999D99')) || '])' debug\n \nfrom (\n\nSELECT TO_CHAR((TIMESTAMP 'epoch' + (adset_inc_cf.timestamp/1000) * INTERVAL '1 second') AT TIME ZONE 'UTC-3','YYYY-MM-DD hh24:MI') increment_date,\n       adset_inc_cf.account_id,\n       adset_inc_cf.campaign_id,\n       adset_inc_cf.adset_id,\n       adset_inc_cf.last_7_days_acc_spend,\n       adset_inc_cf.lifetime_spend,\n       adset_inc_cf.previous_spend,\n       adset_inc_cf.delta_spend,\n       adset_inc_cf.lifetime_pre_conversions,\n       adset_inc_cf.previous_pre_conversions,\n       adset_inc_cf.delta_pre_conversions,\n       adset_inc_cf.last_7_days_acc_pre_conversions,\n       adset_inc_cf.lifetime_revenue,\n       adset_inc_cf.delta_revenue,\n       adset_inc_cf.lifetime_conversions,\n       adset_inc_cf.delta_conversions,\n       adset_inc_cf.lifetime_scval,\n       adset_inc_cf.vrev_adset_inc,\n       adset_inc_cf.pre_conversion_cpa,\n       adset_inc_cf.target_roi,\n       adset_inc_cf.cf_inc,\n       adset_inc_cf.timestamp,\n       adset_inc_cf.previous_timestamp,\n       adset_inc_cf.is_valid,\n       spend0,\n       cf0,\n       spend1,\n       cf1,\n       spend2,\n       cf2,\n       spend3,\n       cf3,\n       spend4,\n       cf4,\n       spend5,\n       cf5,\n       last_6_total_spend,\n       slot_weight,\n       spend_weight,\n       slot0_weight,\n       spend0_weight,\n       slot1_weight,\n       spend1_weight,\n       slot2_weight,\n       spend2_weight,\n       slot3_weight,\n       spend3_weight,\n       slot4_weight,\n       spend4_weight,\n       slot5_weight,\n       spend5_weight,\n       case when cf0<1 then LEAST(final_cf,0.95) else LEAST(final_cf,3.5) end final_cf,\n      cast('ROAS' as varchar(255)) campaign_type,\n      today_adset_spend,\n      daily_budget,\n      last_7_days_acc_conversions,\n      last_7_days_acc_revenue,\n      last_x_days_adset_spend,\n      last_x_days_adset_revenue,\n      daily_budget/100 daily_budget_in_dollars,\n      today_adset_revenue/target_roi ROAS_min_safe_budget,\n      today_adset_conversions * 1/*TargetCPA*/ CPA_min_safe_budget\nfrom sippycup.adset_inc_cf\ninner join (\n            select account_id,campaign_id,adset_id,\n                  max(lifetime_spend)-min(lifetime_spend) last_x_days_adset_spend,\n                  max(lifetime_revenue)-min(lifetime_revenue) last_x_days_adset_revenue,\n                  max(lifetime_conversions)-min(lifetime_conversions) last_x_days_adset_conversions,\n                  max(lifetime_pre_conversions)-min(lifetime_pre_conversions) last_x_days_adset_pre_conversions\n            from sippycup.adset_inc_cf\n            where (TIMESTAMP 'epoch' + (adset_inc_cf.timestamp/1000) * INTERVAL '1 second') between \n                    ((TIMESTAMP 'epoch' + (adset_inc_cf.timestamp/1000) * INTERVAL '1 second')) - INTERVAL '5 day' and (TIMESTAMP 'epoch' + (adset_inc_cf.timestamp/1000) * INTERVAL '1 second')\n                    and DATE_PART('day', (current_TIMESTAMP) - (TIMESTAMP 'epoch' + (adset_inc_cf.timestamp/1000) * INTERVAL '1 second'))<=5\n            group by adset_inc_cf.account_id,\n                      adset_inc_cf.campaign_id,\n                       adset_inc_cf.adset_id\n            ) adset_inc_cf_last_x_days\non adset_inc_cf_last_x_days.account_id = adset_inc_cf.account_id and \n  adset_inc_cf_last_x_days.campaign_id = adset_inc_cf.campaign_id and \n  adset_inc_cf_last_x_days.adset_id = adset_inc_cf.adset_id\ninner join (\n            select account_id,campaign_id,adset_id,\n                  max(lifetime_spend)-min(lifetime_spend) today_adset_spend,\n                  max(lifetime_revenue)-min(lifetime_revenue) today_adset_revenue,\n                  max(lifetime_conversions)-min(lifetime_conversions) today_adset_conversions,\n                  max(lifetime_pre_conversions)-min(lifetime_pre_conversions) today_adset_pre_conversions\n            from sippycup.adset_inc_cf\n            where  TO_CHAR((TIMESTAMP 'epoch' + ((select max(timestamp) from sippycup.adset_inc_cf)/1000) * INTERVAL '1 second') AT TIME ZONE 'UTC-3','YYYY-MM-DD')=\n                    TO_CHAR((TIMESTAMP 'epoch' + (adset_inc_cf.timestamp/1000) * INTERVAL '1 second') AT TIME ZONE 'UTC-3','YYYY-MM-DD')\n            group by adset_inc_cf.account_id,\n                      adset_inc_cf.campaign_id,\n                       adset_inc_cf.adset_id\n            ) adset_inc_cf_today_days\non adset_inc_cf_today_days.account_id = adset_inc_cf.account_id and \n  adset_inc_cf_today_days.campaign_id = adset_inc_cf.campaign_id and \n  adset_inc_cf_today_days.adset_id = adset_inc_cf.adset_id\nleft join sippycup.adset_final_cf\non adset_final_cf.account_id = adset_inc_cf.account_id and \n      adset_final_cf.campaign_id = adset_inc_cf.campaign_id and \n      adset_final_cf.adset_id = adset_inc_cf.adset_id and\n      adset_final_cf.timestamp = adset_inc_cf.timestamp\nwhere adset_inc_cf.timestamp=(select max(timestamp) from sippycup.adset_inc_cf))a\n\n  )a\n  \n\n","x":540,"y":602.75,"wires":[["81cdb48.55bae48"]]},{"id":"81cdb48.55bae48","type":"function","z":"c3c859b0.7a16a8","name":"","func":"var pg = global.get('pg');\n \n// create a config to configure both pooling behavior \n// and client options \n// note: all config is optional and the environment variables \n// will be read if the config is not present \nvar config = {\n  user: 'root', //env var: PGUSER \n  database: 'sippycup', //env var: PGDATABASE \n  password: 'lioran020', //env var: PGPASSWORD \n  host: 'sippycup.c8wilxdbvlmp.us-east-1.rds.amazonaws.com', // Server hosting the postgres database \n  port: 5432, //env var: PGPORT \n  max: 10, // max number of clients in the pool \n  idleTimeoutMillis: 300000000, // how long a client is allowed to remain idle before being closed \n};\n \n//this initializes a connection pool \n//it will keep idle connections open for 30 seconds \n//and set a limit of maximum 10 idle clients \nvar pool = new pg.Pool(config);\n \n// to run a query we can acquire a client from the pool, \n// run a query on the client, and then return the client to the pool \npool.connect(function(err, client, done) {\n    //node.warn('connecting to pg')\n  if(err) {\n    return node.warn('error fetching client from pool', err);\n  }\n  client.query(msg.payload, function(err, result) {\n    //call `done(err)` to release the client back to the pool (or destroy it if there is an error) \n    done(err);\n    //node.warn('done')\n    if(err) {\n      return node.error('error running query : ' + err);\n    }\n    \n    //node.warn(result)\n    msg.payload = result.rows\n    msg.topic = \"get-rows\"\n    //node.warn('sending message')\n    node.send(msg)\n    //node.warn(result.rows[0].number);\n    //output: 1 \n  });\n});\n \npool.on('error', function (err, client) {\n  // if an error is encountered by a client while it sits idle in the pool \n  // the pool itself will emit an error event with both the error and \n  // the client which emitted the original error \n  // this is a rare occurrence but can happen if there is a network partition \n  // between your application and the database, the database restarts, etc. \n  // and so you might want to handle it and at least log it out \n  node.error('idle client error', err.message, err.stack)\n})","outputs":1,"noerr":0,"x":684.9999923706055,"y":590.25,"wires":[["9b749378.07c44"]]},{"id":"9b749378.07c44","type":"switch","z":"c3c859b0.7a16a8","name":"","property":"topic","propertyType":"msg","rules":[{"t":"eq","v":"get-rows","vt":"str"}],"checkall":"true","outputs":1,"x":826.2499847412109,"y":591.4999904632568,"wires":[["59a6b4fe.b5ddbc"]]},{"id":"fe53b729.497b98","type":"switch","z":"c3c859b0.7a16a8","name":"","property":"is_http","propertyType":"msg","rules":[{"t":"neq","v":"undefined","vt":"jsonata"},{"t":"else"}],"checkall":"true","outputs":2,"x":1621.9642944335938,"y":611.321418762207,"wires":[["74daa499.2910ac"],["7ff35602.7832d8"]]},{"id":"8fc011ae.41796","type":"http response","z":"c3c859b0.7a16a8","name":"","x":1896.6605949401855,"y":507.5357666015625,"wires":[]},{"id":"9f29841f.35bc68","type":"function","z":"c3c859b0.7a16a8","name":"Get campaign data","func":"msg.campaign.adsets = msg.payload.data;\n\nreturn msg;","outputs":1,"noerr":0,"x":321.75000381469727,"y":302.75000381469727,"wires":[["ea470ae0.52e458"]]},{"id":"6686f3d4.83643c","type":"http request","z":"c3c859b0.7a16a8","name":"Get adset budget","method":"GET","ret":"obj","url":"https://graph.facebook.com/v2.10/{{{campaign.id}}}/adsets/?fields=id,end_time,lifetime_budget,daily_budget,effective_status&date_preset=lifetime&level=adset&limit=10000&p=2&access_token={{{fb_account.access_token}}}","tls":"","x":168.75,"y":247.00000381469727,"wires":[["9f29841f.35bc68"]]},{"id":"e8620043.cca18","type":"function","z":"c3c859b0.7a16a8","name":"","func":"var ad = msg.payload\n\nmsg.partitionkey = ad.account.account_id + \".\" + ad.adset_id + \".\" + ad.ad_id\nmsg.payload = JSON.stringify(ad)\n\nreturn msg;","outputs":1,"noerr":0,"x":615.625,"y":499,"wires":[[]]},{"id":"7ff35602.7832d8","type":"debug","z":"c3c859b0.7a16a8","name":"","active":true,"console":"false","complete":"false","x":1735.714464187622,"y":751.1427774429321,"wires":[]},{"id":"5ceb4e7f.2b584","type":"inject","z":"c3c859b0.7a16a8","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":184.28571428571422,"y":663.9999999999999,"wires":[["24b3cc17.418224"]]},{"id":"59a6b4fe.b5ddbc","type":"split","z":"c3c859b0.7a16a8","name":"","splt":"\\n","x":960.0000610351562,"y":592.5714721679688,"wires":[["801b16fa.65fe88"]]},{"id":"801b16fa.65fe88","type":"switch","z":"c3c859b0.7a16a8","name":"is debug mode","property":"payload.debug","propertyType":"msg","rules":[{"t":"neq","v":"undefined","vt":"jsonata"},{"t":"else"}],"checkall":"true","outputs":2,"x":1125.000015258789,"y":595.428560256958,"wires":[["5d128fa0.155ec"],[]]},{"id":"5d128fa0.155ec","type":"function","z":"c3c859b0.7a16a8","name":"","func":"msg.payload.debug = msg.payload.debug.split(\"\\n\")\n\nreturn msg;","outputs":1,"noerr":0,"x":1299.9999923706055,"y":588.2857666015625,"wires":[["19a86085.0e958f"]]},{"id":"19a86085.0e958f","type":"json","z":"c3c859b0.7a16a8","name":"","x":1419.9999084472656,"y":645.428560256958,"wires":[["b2058a64.5dc5b8"]]},{"id":"b2058a64.5dc5b8","type":"json","z":"c3c859b0.7a16a8","name":"","x":1524.999994277954,"y":565.4285793304443,"wires":[["fe53b729.497b98"]]},{"id":"74daa499.2910ac","type":"join","z":"c3c859b0.7a16a8","name":"","mode":"auto","build":"string","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","timeout":"","count":"","x":1674.2857142857142,"y":519.7142857142857,"wires":[["8fc011ae.41796"]]},{"id":"a31b29c3.8e46e8","type":"function","z":"c3c859b0.7a16a8","name":"","func":"msg.headers = {\n    \"Content-Type\" : \"text/html\"\n}\n\nmsg.payload = syntaxHighlight(msg.payload);// \"<pre>\" + msg.payload + \"</pre>\"\n\nfunction syntaxHighlight(json) {\n    if (typeof json != 'string') {\n         json = JSON.stringify(json, undefined, 2);\n    }\n    json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n    return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\n        var cls = 'number';\n        if (/^\"/.test(match)) {\n            if (/:$/.test(match)) {\n                cls = 'key';\n            } else {\n                cls = 'string';\n            }\n        } else if (/true|false/.test(match)) {\n            cls = 'boolean';\n        } else if (/null/.test(match)) {\n            cls = 'null';\n        }\n        return '<span class=\"' + cls + '\"><pre>' + match + '</pre></span>';\n    });\n}\nreturn msg;","outputs":1,"noerr":0,"x":1815,"y":579.7142944335938,"wires":[["8fc011ae.41796"]]},{"id":"58391c33.51dab4","type":"debug","z":"c3c859b0.7a16a8","name":"","active":true,"console":"false","complete":"true","x":783.125,"y":335.25000381469727,"wires":[]},{"id":"933cd808.8c7c18","type":"inject","z":"75754e68.a55af","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":true,"onceDelay":0.1,"x":110,"y":80,"wires":[["58aee25b.1f72fc"]]},{"id":"58aee25b.1f72fc","type":"function","z":"75754e68.a55af","name":"Inset Tasks","func":"\nmsg.payload = [\n    {\n        \"name\": \"1betpro.com\",\n        \"type\": \"scrape\",\n        \"config\": {\n            \"url\": \"https://1betpro.com/\",\n            \"username\": \"Tal1234\",\n            \"password\": \"1111\",\n            \"username_selector\": \"#form > div:nth-child(2) > input\",\n            \"password_selector\": \"#form > div:nth-child(3) > input\",\n            \"login_button_selector\": \"#form > input\"\n        },\n        \"_time\" : msg.payload,\n        \"time\"  : new Date(msg.payload).toISOString()\n    }]\n\nreturn msg;","outputs":1,"noerr":0,"x":270,"y":160,"wires":[["c8486bed.2a2718"]]},{"id":"fdf5f5ff.d406f8","type":"kafka producer","z":"75754e68.a55af","name":"tasks","zk":"zookeeper-zookeeper.default.svc.cluster.local:2181","topics":"tasks","kafkaClientId":"","zkSessionTimeout":"","zkSpinDelay":"","zkRetries":"","noAckBatchSize":"","noAckBatchAge":"","requireAcks":"","ackTimeoutMs":"","partitionerType":"","x":650,"y":160,"wires":[]},{"id":"78d47740.a8b4d8","type":"kafka consumer","z":"25e0c6e7.7b804a","name":"tasks","zk":"zookeeper-zookeeper.default.svc.cluster.local:2181","topics":"tasks","consumerGroupId":"","autoCommit":"","kafkaEncoding":"utf8","x":90,"y":80,"wires":[["61bfcf88.7c0db"]]},{"id":"151d107c.6f1aa","type":"debug","z":"25e0c6e7.7b804a","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","x":810,"y":280,"wires":[]},{"id":"c8486bed.2a2718","type":"split","z":"75754e68.a55af","name":"","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","x":490,"y":160,"wires":[["fdf5f5ff.d406f8"]]},{"id":"20d8b05a.fe4ba","type":"json","z":"25e0c6e7.7b804a","name":"","property":"payload","action":"","pretty":true,"x":470,"y":80,"wires":[["6ea8b5cd.6c635c"]]},{"id":"61bfcf88.7c0db","type":"function","z":"25e0c6e7.7b804a","name":"","func":"msg.payload = msg.payload.value;\n\nnode.log(msg.payload);\n\nreturn msg;","outputs":1,"noerr":0,"x":270,"y":80,"wires":[["20d8b05a.fe4ba"]]},{"id":"6ea8b5cd.6c635c","type":"switch","z":"25e0c6e7.7b804a","name":"","property":"payload.type","propertyType":"msg","rules":[{"t":"eq","v":"scrape","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":530,"y":180,"wires":[["15533bd8.282f44"]]},{"id":"15533bd8.282f44","type":"function","z":"25e0c6e7.7b804a","name":"Scrape","func":"'use strict';\n\nconst puppeteer = global.get('puppeteer');\n\nglobal.toJSON = function toJSON(node) {\n  node = node || this;\n  var obj = {\n    nodeType: node.nodeType\n  };\n  if (node.tagName) {\n    obj.tagName = node.tagName.toLowerCase();\n  } else\n  if (node.nodeName) {\n    obj.nodeName = node.nodeName;\n  }\n  if (node.nodeValue) {\n    obj.nodeValue = node.nodeValue;\n  }\n  var attrs = node.attributes;\n  if (attrs) {\n    var length = attrs.length;\n    var arr = obj.attributes = new Array(length);\n    for (var i = 0; i < length; i++) {\n      attr = attrs[i];\n      arr[i] = [attr.nodeName, attr.nodeValue];\n    }\n  }\n  var childNodes = node.childNodes;\n  if (childNodes) {\n    length = childNodes.length;\n    arr = obj.childNodes = new Array(length);\n    for (i = 0; i < length; i++) {\n      arr[i] = toJSON(childNodes[i]);\n    }\n  }\n  return obj;\n};\n\nglobal.toDOM = function toDOM(obj) {\n  if (typeof obj == 'string') {\n    obj = JSON.parse(obj);\n  }\n  var node, nodeType = obj.nodeType;\n  switch (nodeType) {\n    case 1: //ELEMENT_NODE\n      node = document.createElement(obj.tagName);\n      var attributes = obj.attributes || [];\n      for (var i = 0, len = attributes.length; i < len; i++) {\n        var attr = attributes[i];\n        node.setAttribute(attr[0], attr[1]);\n      }\n      break;\n    case 3: //TEXT_NODE\n      node = document.createTextNode(obj.nodeValue);\n      break;\n    case 8: //COMMENT_NODE\n      node = document.createComment(obj.nodeValue);\n      break;\n    case 9: //DOCUMENT_NODE\n      node = document.implementation.createDocument();\n      break;\n    case 10: //DOCUMENT_TYPE_NODE\n      node = document.implementation.createDocumentType(obj.nodeName);\n      break;\n    case 11: //DOCUMENT_FRAGMENT_NODE\n      node = document.createDocumentFragment();\n      break;\n    default:\n      return node;\n  }\n  if (nodeType == 1 || nodeType == 11) {\n    var childNodes = obj.childNodes || [];\n    for (i = 0, len = childNodes.length; i < len; i++) {\n      node.appendChild(toDOM(childNodes[i]));\n    }\n  }\n  return node;\n};\n\n\n(async() => {\n    const browser = await puppeteer.launch({args: ['--no-sandbox', '--disable-setuid-sandbox']});\n    const page = await browser.newPage();\n    \n    await page.goto(msg.payload.config.url);\n    \n    await page.type(msg.payload.config.username_selector, msg.payload.config.username);\n    await page.type(msg.payload.config.password_selector, msg.payload.config.password);\n    \n    await page.waitForSelector(msg.payload.config.login_button_selector);\n    \n    await page.click(msg.payload.config.login_button_selector);\n    \n    await page.waitForSelector('#logout_user');\n    \n    await page.goto(\"https://1betpro.com/live/\");\n    \n    await page.waitForSelector('#select_type_bet > a.Active');\n    \n    const resultsSelector = 'tr.bets_lines td';\n\n    // Extract the results from the page.\n    const rows = await page.evaluate(resultsSelector => {\n        const anchors = Array.from(document.querySelectorAll(resultsSelector));\n        return anchors.map((anchor, index, array) => {\n        \n            row = {};\n            \n            row.fixed_number_of_total_td_in_tr = 8;\n            row.index = index;\n            \n            row.id = `${anchor.id}`;\n            row.textContent = `${anchor.textContent}`;\n            //row.source = toJSON(anchor);\n            \n            //custom transformation\n            row.id_parts = row.id.split(\"_\");\n            row.part0 = (row.id_parts.length > 0) ? row.id_parts[0] : null;\n            row.part1 = (row.id_parts.length > 1) ? row.id_parts[1] : null;\n            row.part2 = (row.id_parts.length > 2) ? row.id_parts[2] : null;\n            row.part3 = (row.id_parts.length > 3) ? row.id_parts[3] : null;\n            row.part4 = (row.id_parts.length > 4) ? row.id_parts[4] : null;\n            \n            row.team  = (row.id === \"team\") ? anchor.childNodes[1].text : null;\n            row.score = (row.id === \"team\") ? anchor.childNodes[0].text : null;\n              \n            row.bet_1x2 = (row.part2===\"02\")? row.textContent : null;\n            \n            row.bet_handicap1 = (row.part2===\"01\")? row.textContent.split(\" \")[0] : null;\n            row.bet_handicap2 = (row.part2===\"01\")? row.textContent.split(\" \")[1] : null;\n            \n            row.bet_over1 = (row.part2===\"03\" && row.textContent.split(\" \")[0]===\"O\")? row.textContent.split(\" \")[1]  : null;\n            row.bet_over2 = (row.part2===\"03\" && row.textContent.split(\" \")[0]===\"O\")? row.textContent.split(\" \")[2]  : null;\n    \n            row.bet_under1 = (row.part2===\"03\" && row.textContent.split(\" \")[0]===\"U\")? row.textContent.split(\" \")[1]  : null;\n            row.bet_under2 = (row.part2===\"03\" && row.textContent.split(\" \")[0]===\"U\")? row.textContent.split(\" \")[2]  : null;\n    \n            console.log(row);\n            \n            return row;\n\n        });\n    }, resultsSelector);\n\n  //console.log(rows.join('\\n'));\n  //console.log(rows);\n  \n  await browser.close();\n  \n  msg.payload = rows;\n  msg.topic = \"TASK_COMPLETED\";\n  node.send(msg);\n})();","outputs":1,"noerr":0,"x":640,"y":240,"wires":[["151d107c.6f1aa"]]},{"id":"8b6492f3.6bc68","type":"function","z":"25e0c6e7.7b804a","name":"Scrape","func":"'use strict';\n\nconst puppeteer = global.get('puppeteer');\n\n(async() => {\n  const browser = await puppeteer.launch({args: ['--no-sandbox', '--disable-setuid-sandbox']});\n  const page = await browser.newPage();\n\n  await page.goto(msg.payload.config.url);\n\n  await page.type(msg.payload.config.username_selector, msg.payload.config.username);\n  await page.type(msg.payload.config.password_selector, msg.payload.config.password);\n\n  await page.waitForSelector(msg.payload.config.login_button_selector);\n  \n  await page.click(msg.payload.config.login_button_selector);\n\n  await page.waitForSelector('#logout_user');\n  \n  await page.goto(\"https://1betpro.com/live/\");\n  \n  await page.waitForSelector('#select_type_bet > a.Active');\n  \n  //node.log(page.title());\n  \n  //const resultsSelector = '.addbetslip';\n  const resultsSelector = 'tr.bets_lines td';\n  // Extract the results from the page.\n  const lines = await page.evaluate(resultsSelector => {\n    const anchors = Array.from(document.querySelectorAll(resultsSelector));\n    return anchors.map((anchor, index, array) => {\n    \n        const fixed_number_of_total_td_in_tr=8;\n        const row_number = Math.floor(index/fixed_number_of_total_td_in_tr);\n        const source = anchor;\n        const uuid = `${anchor.id}`;\n        const textContent = anchor.textContent.trim();\n        \n        var attributes = uuid.split(\"_\");\n        var line = {\n          \"uuid\" : uuid,\n          \"id\" :  attributes[0],\n          \"part1\": attributes[1],\n          \"part2\": attributes[2],\n          \"part3\": attributes[3],\n          \"part4\": attributes[4],\n          \"part5\": attributes[5],\n          \"team\" : team,\n          \"line\": textContent\n          };\n        \n        line.bet_1x2 = (line.part2==\"02\")? textContent : null;\n        line.bet_handicap = (line.part2==\"01\")? textContent.split(\" \")[0] + \"/\" + textContent.split(\" \")[1] : null;\n        line.bet_over = (line.part2==\"03\" && textContent.split(\" \")[0]==\"O\")? textContent.split(\" \")[1] + \"/\" + textContent.split(\" \")[2]  : null;\n        line.bet_under = (line.part2==\"03\" && textContent.split(\" \")[0]==\"U\")? textContent.split(\" \")[1] + \"/\" + textContent.split(\" \")[2]  : null;\n\n        return line;\n    });\n    \n  }, resultsSelector);\n  \n  //console.log(lines.join('\\n'));\n  \n  await browser.close();\n  \n  msg.payload = lines;\n  msg.topic = \"TASK_COMPLETED\";\n  node.send(msg);\n})();","outputs":1,"noerr":0,"x":656.2744140625,"y":383.7548828125,"wires":[[]]}]