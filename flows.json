[{"id":"25e0c6e7.7b804a","type":"tab","label":"Puppet Show","disabled":false,"info":""},{"id":"3393a77f.f5daa8","type":"tab","label":"Puppet Show 93ea28f","disabled":false,"info":""},{"id":"151d107c.6f1aa","type":"debug","z":"25e0c6e7.7b804a","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","x":950,"y":280,"wires":[]},{"id":"20d8b05a.fe4ba","type":"json","z":"25e0c6e7.7b804a","name":"","property":"payload.value","action":"","pretty":true,"x":250,"y":160,"wires":[["15533bd8.282f44"]]},{"id":"15533bd8.282f44","type":"function","z":"25e0c6e7.7b804a","name":"query Selectors","func":"'use strict';\n\nmsg.topic = \"1betpro\";\n\n//For Debuging with injection and without kafka\nif(msg.payload.value!==undefined){\n    msg.payload = msg.payload.value;\n}\nelse{\n    msg.payload.value = msg.payload;\n}\n//End Debugging\n\nconst puppeteer = global.get('puppeteer');\n\n(async() => {\n    const browser = await puppeteer.launch({args: msg.payload.value.browser_args});\n    const page = await browser.newPage();\n    \n    await page.goto(msg.payload.value.url);\n    \n    await page.type(msg.payload.value.username_selector, msg.payload.value.username);\n    await page.type(msg.payload.value.password_selector, msg.payload.value.password);\n    \n    await page.waitForSelector(msg.payload.value.login_button_selector);\n    \n    await page.click(msg.payload.value.login_button_selector);\n    \n    await page.waitForSelector(msg.payload.value.logout_user_selector);\n    \n    await page.goto(msg.payload.value.next_url);\n    \n    await page.waitForSelector(msg.payload.value.wait_for_selector);\n    \n    /*result = await page.evaluate(async (queries) => {\n      new Promise((resolve, reject) => {\n        try {\n\n            queries.filter(query => query.enabled).map(query => {\n                \n                attributes = function (e){\n                    return Array.from(e.attributes).map(attribute => ({name: attribute.name, value: attribute.value}))\n                }\n                \n                query.result = Array.from(document.querySelectorAll(query.selector)).map(eval(query.pageFunction));\n                return query;\n            });\n\n            if(queries.length>0) resolve();\n            \n        } catch (error) {\n            console.log(\"error!!!!\")\n          reject(error);\n        }\n      }).catch(error => {\n        console.log(\"error!!!!\") // add catch here\n        //console.error(error) // add catch here\n      })\n    }, msg.payload.value.queries);\n    */\n    \n    result = await page.evaluate(queries => {\n        \n        var attributes = function (e){\n            \n            result = Array.from(e.attributes).map(attribute => ({name: attribute.name, value: attribute.value}))\n            result.push({name: 'innerText', value: e.innerText});\n            result.push({name: 'innerHTML', value: e.innerHTML});\n            result.push({name: 'outerHTML', value: e.outerHTML});\n            \n            return result;\n        }\n        \n        var groupBy = function(xs, key) {\n            return xs.reduce(function(rv, x) {\n                (rv[x[key]] = rv[x[key]] || []).push(x);\n                return rv;\n            }, {});\n        };\n            \n        var select = function(e) {\n            \n            queries = e.queries;\n            e.data = [];\n            \n            if(e.document===undefined) e.document = document;\n            \n            queries.filter(query => query.enabled).forEach(query => {\n        \n                query_result =[];\n                \n                try{\n                    \n                    if(query.selector!==undefined){\n                        query.selected = true;\n                        if(query.pageFunction===undefined){\n                            query_result = Array.from(e.document.querySelectorAll(query.selector));\n                        }\n                        else{\n                            query.mapped = true;\n                            query_result = Array.from(e.document.querySelectorAll(query.selector)).map(eval(query.pageFunction));\n                        }\n                        \n                        if(query.command!==undefined){\n                            query.modified = true;\n                            Array.from(e.document.querySelectorAll(query.selector)).forEach(eval(query.command));\n                        }\n                    }\n                    \n                    if(query.filter!==undefined){\n                        query.filtered = true;\n                        query_result = query_result.filter(eval(query.filter));\n                    }\n                    \n                    if(query.groupBy!==undefined){\n                        query.grouped = true;\n                        query_result = groupBy(query_result, query.groupBy);\n                    }\n                    \n                    /*if(!Array.isArray(query.result)){\n                        query.result = new Array(query.result);\n                    }*/\n                    \n                    if((query.queries!==undefined || e.key!==undefined ) && query_result.length>0){\n                        \n                        query_result.map(child => {\n                            child.queries = query.queries;\n                            child.parent = (e.key!==undefined) ? e.key : null;\n                            if(query.queries!==undefined && query_result.length>0) select(child);\n                            \n                            //return child;\n                        });\n                    }\n                }\n                catch(error){\n                    console.error(error);\n                    query.error = error.message;\n                }\n                \n                e.data.push({query: query, data: query_result});\n                \n                return query;\n            })\n            \n            //e.data.push(queries);\n            return e;\n        }\n        \n        let e = {queries: queries};\n        \n        return select(e);\n        \n    },msg.payload.value.queries);\n    \n    \n    //Array.from(e.attributes).map(attribute => ({name: attribute.name, value: attribute.value}))\n    msg.payload = result;\n    /*msg.payload = await page.evaluate({\n        return Array.from(document.querySelectorAll(results_selector));\n    });*/\n    \n    msg.topic = msg.topic + \"_extracted\";\n\n    node.send(msg);\n    \n        \n    \n\n    await browser.close();\n\n})();","outputs":1,"noerr":0,"x":460,"y":160,"wires":[["6d93887e.c57a98"]]},{"id":"fcf73cfd.bae76","type":"kafka consumer","z":"25e0c6e7.7b804a","name":"1betpro","zk":"zookeeper-zookeeper.default.svc.cluster.local:2181","topics":"1betpro","consumerGroupId":"","autoCommit":"","kafkaEncoding":"utf8","x":90,"y":160,"wires":[["20d8b05a.fe4ba"]]},{"id":"7ac484b7.34c5fc","type":"kafka producer","z":"25e0c6e7.7b804a","name":"1betpro_finished","zk":"zookeeper-zookeeper.default.svc.cluster.local:2181","topics":"1betpro_finished","kafkaClientId":"","zkSessionTimeout":"","zkSpinDelay":"","zkRetries":"","noAckBatchSize":"","noAckBatchAge":"","requireAcks":"","ackTimeoutMs":"","partitionerType":"","x":1070,"y":660,"wires":[]},{"id":"ec67ce57.5fe5b","type":"kafka consumer","z":"25e0c6e7.7b804a","name":"1betpro_finished","zk":"zookeeper-zookeeper.default.svc.cluster.local:2181","topics":"1betpro_finished","consumerGroupId":"","autoCommit":"","kafkaEncoding":"utf8","x":120,"y":280,"wires":[["2eb771d3.abcbee"]]},{"id":"2eb771d3.abcbee","type":"json","z":"25e0c6e7.7b804a","name":"","property":"payload.value","action":"","pretty":true,"x":490,"y":280,"wires":[["151d107c.6f1aa"]]},{"id":"8e8ed84d.848508","type":"inject","z":"25e0c6e7.7b804a","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":100,"y":80,"wires":[["a0fbec9e.347ae"]]},{"id":"a0fbec9e.347ae","type":"function","z":"25e0c6e7.7b804a","name":"prepare 1betpro message","func":"msg = {\n    topic : '1betpro',\n    payload : {\n        browser_args: ['--no-sandbox', '--disable-setuid-sandbox', '--shm-size=1gb', '--disable-dev-shm-usage'],\n        url: 'https://1betpro.com/',\n        username: 'Tal1234',\n        password: '1111',\n        username_selector: '#form > div:nth-child(2) > input',\n        password_selector: '#form > div:nth-child(3) > input',\n        login_button_selector: '#form > input',\n        logout_user_selector: '#logout_user',\n        next_url: 'https://1betpro.com/live/',\n        wait_for_selector: '#select_type_bet > a.Active',\n        results_selector : '.live_lines',//'tr.bets_lines td',\n        queries:[{\n                selector: \".live_lines\",\n                //name: \"live_lines\",\n                pageFunction : \"e => ({ document: e, key: 'live_lines'})\",\n                args: [],\n                enabled: true,\n                queries:[{\n                    selector: \".live_lines div[league_id]\",\n                    //name: \"leagues\",\n                    pageFunction : \"e => ({document: e, type: 'league', key: attributes(e).filter(attribute => attribute.name === 'league_id')[0].value})\",\n                    args: [],\n                    enabled: true,\n                    queries:[{\n                        selector: \".teams\",\n                        //name: \"teams\",\n                        pageFunction : \"(e ,index) => ({type :'line.team', number: Math.floor(index / 3), team: e.innerText, index :index})\",\n                        //filter: \"line => line.index % 3 === 0\",\n                        //groupBy: 'number',\n                        args: [],\n                        enabled: true            \n                    },{\n                        selector: \".bets_lines\",\n                        //name: \"lines\",\n                        pageFunction : \"(e ,index) => ({type :'line.bet', number: Math.floor(index / 3), row: e.innerText, index :index})\",\n                        //groupBy: 'number',\n                        args: [],\n                        enabled: true\n                    }]\n                }],\n            },{\n                selector: \".live_lines div[league_id]\",\n                pageFunction : \"e => ({type: 'league', innerHTML: e.innerHTML, key: attributes(e).filter(attribute => attribute.name === 'league_id')[0].value})\",\n                args: [],\n                enabled: false,\n                queries:[{\n                    selector: \".teams\",\n                    pageFunction : \"(e ,index) => ({type :'line.team', number: Math.floor(index / 3), team: e.innerText, league_id: e.parent.key, index :index})\",\n                    //filter: \"line => line.index % 3 === 0\",\n                    groupBy: 'number',\n                    args: [],\n                    enabled: false            \n                },{\n                    selector: \".bets_lines\",\n                    pageFunction : \"(e ,index) => ({type :'line.bet', number: Math.floor(index / 3), row: e.innerText, league_id: e.parent, index :index})\",\n                    groupBy: 'number',\n                    args: [],\n                    enabled: false\n                }]\n            },{\n                selector: \".live_lines > table .head_line_bottom b\",\n                pageFunction : \"e => ({type: 'league', name: e.innerText})\",\n                args: [],\n                enabled: false\n            },{\n                selector: \".live_lines > div[league_id] .bets_lines\",\n                pageFunction : \"(e ,index) => ({type :'line', row: e.innerText.split('\\\\t')[0], index :index})\",\n                groupBy: 'number',\n                args: [],\n                enabled: false\n            },{\n                selector: \".live_lines > div[league_id] .teams\",\n                pageFunction : \"(e ,index) => ({type :'line.team', number: Math.floor(index / 3), team: e.innerText, league_id: attributes(e).filter(attribute => attribute.name === 'league_id')[0].value,index :index})\",\n                //filter: \"line => line.index % 3 === 0\",\n                groupBy: 'number',\n                args: [],\n                enabled: false            \n            }],\n        models: \n            [{\n                key : \"LiveLine\",\n                selector: \".live_lines\",\n                value: \"outerHTML\",\n                models: [{\n                    key : \"League\",\n                    selector : \"div[league_id]\",\n                    value: \"league_id\",\n                    fields: [{\n                        key : \"name\",\n                        selector : \".head_line_bottom b\",\n                        value: \"textContent\"\n                    }]\n                }]\n            }],\n        reduce_selector : '.head_line_bottom b',\n        finish_topic_suffix : \"_finished\",\n        _time : msg.payload,\n        time  : new Date(msg.payload).toISOString()\n    }\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":510,"y":80,"wires":[["15533bd8.282f44"]]},{"id":"c0854aa1.d7d978","type":"kafka producer","z":"25e0c6e7.7b804a","name":"1betpro","zk":"zookeeper-zookeeper.default.svc.cluster.local:2181","topics":"1betpro","kafkaClientId":"","zkSessionTimeout":"","zkSpinDelay":"","zkRetries":"","noAckBatchSize":"","noAckBatchAge":"","requireAcks":"","ackTimeoutMs":"","partitionerType":"","x":920,"y":80,"wires":[]},{"id":"6d93887e.c57a98","type":"switch","z":"25e0c6e7.7b804a","name":"1betpro","property":"topic","propertyType":"msg","rules":[{"t":"eq","v":"1betpro_extracted","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":620,"y":160,"wires":[["151d107c.6f1aa"]]},{"id":"4bcd4375.8f581c","type":"function","z":"25e0c6e7.7b804a","name":"Aggregate","func":"const fixed_number_of_total_td_in_tr = 10;\nconst start_from_td = 2;\nanchors = msg.payload;\n\naggregated_rows = [];\n\nfor (i = start_from_td; i < anchors.length; i+fixed_number_of_total_td_in_tr) {\n    \n    try{\n        const anchor = anchors[i];\n        \n        row = {};\n        \n        row.team  = (anchor.innerHTML.lenght>0) ? anchor.innerHTML.split(\"</\")[1].split(\">\")[anchor.innerHTML.split(\"</\")[1].split(\">\").length-1] : null;\n        row.score = (anchor.innerHTML.lenght>0) ? anchor.innerHTML.split(\"</\")[0].split(\">\")[anchor.innerHTML.split(\"</\")[0].split(\">\").length-1] : null;\n          \n        aggregated_rows.push(row); \n    }\n    catch(e){\n        \n    }\n}\n\nmsg = {\n    topic: \"1betpro_aggregated\",\n    payload : aggregated_rows\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":730,"y":640,"wires":[["151d107c.6f1aa"]]},{"id":"bbe0460c.a8cb38","type":"catch","z":"25e0c6e7.7b804a","name":"","scope":null,"x":100,"y":380,"wires":[["3faddb54.b39bc4"]]},{"id":"15755a87.2b8635","type":"json","z":"25e0c6e7.7b804a","name":"","property":"payload.value","action":"","pretty":true,"x":470,"y":460,"wires":[["3faddb54.b39bc4"]]},{"id":"b6b2ec59.a695d","type":"kafka producer","z":"25e0c6e7.7b804a","name":"errors","zk":"zookeeper-zookeeper.default.svc.cluster.local:2181","topics":"errors","kafkaClientId":"","zkSessionTimeout":"","zkSpinDelay":"","zkRetries":"","noAckBatchSize":"","noAckBatchAge":"","requireAcks":"","ackTimeoutMs":"","partitionerType":"","x":930,"y":380,"wires":[]},{"id":"b54fdd71.b18a8","type":"kafka consumer","z":"25e0c6e7.7b804a","name":"errors","zk":"zookeeper-zookeeper.default.svc.cluster.local:2181","topics":"errors","consumerGroupId":"","autoCommit":"","kafkaEncoding":"utf8","x":90,"y":460,"wires":[["15755a87.2b8635"]]},{"id":"3faddb54.b39bc4","type":"debug","z":"25e0c6e7.7b804a","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":920,"y":460,"wires":[]},{"id":"5f2dbc78.fb1c94","type":"function","z":"25e0c6e7.7b804a","name":"query Selectors 1.0","func":"'use strict'; \nmsg.topic = \"1betpro\";\n\nconst puppeteer = global.get('puppeteer');\n\n(async() => {\n    const browser = await puppeteer.launch({args: msg.payload.value.browser_args});\n    const page = await browser.newPage();\n    \n    await page.goto(msg.payload.value.url);\n    \n    await page.type(msg.payload.value.username_selector, msg.payload.value.username);\n    await page.type(msg.payload.value.password_selector, msg.payload.value.password);\n    \n    await page.waitForSelector(msg.payload.value.login_button_selector);\n    \n    await page.click(msg.payload.value.login_button_selector);\n    \n    await page.waitForSelector(msg.payload.value.logout_user_selector);\n    \n    await page.goto(msg.payload.value.next_url);\n    \n    await page.waitForSelector(msg.payload.value.wait_for_selector);\n    \n    // Extract the results from the page.\n    rows = await page.evaluate(results_selector => {\n        \n        //Extract\n        anchors = Array.from(document.querySelectorAll(results_selector));\n        \n        \n        //Transform\n        return anchors.map((anchor, index, array) => {\n            row = {};\n                \n            row.fixed_number_of_total_td_in_tr = 10;\n            row.array_length = array.length;\n            \n            row.index = index;\n            row.event_number = Math.floor(row.index/10);\n            row.textContent = `${anchor.textContent}`;\n            row.innerHTML = `${anchor.innerHTML}`;\n            \n            if(`${anchor.id}`!==\"\"){\n                row.id = `${anchor.id}`;\n                \n                row.team_anchor_index = (row.event_number*10);\n                \n                //team_anchor = array[team_anchor_index];\n                \n                //console.log(team_anchor);\n                \n                //row.team_innerHTML = `${team_anchor.innerHTML}`;\n                \n                row.source = anchor;\n                \n                row.elements = row.innerHTML.split(\"</\");\n                //custom transformation\n                row.id_parts = row.id.split(\"_\");\n                row.part0 = (row.id_parts.length > 0) ? row.id_parts[0] : null;\n                row.part1 = (row.id_parts.length > 1) ? row.id_parts[1] : null;\n                row.part2 = (row.id_parts.length > 2) ? row.id_parts[2] : null;\n                row.part3 = (row.id_parts.length > 3) ? row.id_parts[3] : null;\n                row.part4 = (row.id_parts.length > 4) ? row.id_parts[4] : null;\n                \n                //row.team  = (team_innerHTML.lenght>0) ? team_innerHTML.split(\"</\")[1].split(\">\")[team_innerHTML.split(\"</\")[1].split(\">\").length-1] : null;\n                //row.score = (team_innerHTML.lenght>0) ? team_innerHTML.split(\"</\")[0].split(\">\")[team_innerHTML.split(\"</\")[0].split(\">\").length-1] : null;\n                  \n                row.bet_1x2 = (row.part2===\"02\")? row.textContent : null;\n                \n                row.bet_handicap1 = (row.part2===\"01\")? row.textContent.split(\" \")[0] : null;\n                row.bet_handicap2 = (row.part2===\"01\")? row.textContent.split(\" \")[1] : null;\n                \n                row.bet_over1 = (row.part2===\"03\" && row.textContent.split(\" \")[0]===\"O\")? row.textContent.split(\" \")[1]  : null;\n                row.bet_over2 = (row.part2===\"03\" && row.textContent.split(\" \")[0]===\"O\")? row.textContent.split(\" \")[2]  : null;\n        \n                row.bet_under1 = (row.part2===\"03\" && row.textContent.split(\" \")[0]===\"U\")? row.textContent.split(\" \")[1]  : null;\n                row.bet_under2 = (row.part2===\"03\" && row.textContent.split(\" \")[0]===\"U\")? row.textContent.split(\" \")[2]  : null;\n        \n                //console.log(row);\n            //}\n            //catch(e){\n                \n            //}\n            }\n            \n            return row;\n            \n        });\n    }, msg.payload.value.results_selector);\n  \n    msg.topic = msg.topic + \"_extracted\";\n    \n    msg.payload = await rows.reduce((all, one) =>{\n        \n        if(!Array.isArray(all)){\n            all = [];\n        }\n        \n        result = all[one.event_number];\n        \n        console.log(result);\n        \n        if (result === undefined) {\n            // not found\n            one.all = [];\n            all.splice(one.event_number, 0, one);\n        }  else {\n            // multiple items found\n            result.all.splice(one.event_number, 0, one);\n        }\n        \n        return all;\n    });\n    \n    node.send(msg);\n    //console.log(rows.join('\\n'));\n    //console.log(rows);\n  \n    browser.close();\n})();","outputs":1,"noerr":0,"x":370,"y":560,"wires":[[]]},{"id":"ddf233b7.569e8","type":"html","z":"25e0c6e7.7b804a","name":"","property":"payload.innerHTML","tag":"","ret":"html","as":"multi","x":790,"y":160,"wires":[["c85cc2ae.ad0ad"]]},{"id":"c85cc2ae.ad0ad","type":"debug","z":"25e0c6e7.7b804a","name":"","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"payload","x":960,"y":160,"wires":[]},{"id":"5b8b5869.7e75c8","type":"function","z":"25e0c6e7.7b804a","name":"","func":"//Extract\n        function map_document(doc, models){\n        \n            return models.map(model=> {\n                \n                model.rows = [];\n                \n                anchors = Array.from(doc.querySelectorAll(model.selector));\n                    \n                anchors.forEach((anchor) => {\n                    row = {};\n                    row.messages = [];\n                    \n                    row.key = model.key;\n                    row.selector = model.selector;\n                    \n                    row.attributes = Array.from(anchor.attributes).map(someAt => ({name: someAt.name, value: someAt.value}))\n                    row.attributes.push({name: \"textContent\", value: `${anchor.textContent}`});\n                    row.attributes.push({name: \"innerHTML\", value: `${anchor.innerHTML}`});\n                    row.attributes.push({name: \"outerHTML\", value: `${anchor.outerHTML}`});\n                    row.value = null;\n                    \n                    if(model.hasOwnProperty(\"value\")){\n                        row.messages.push(\"model \" + model.key + \" has value\");\n                        row.attribute = row.attributes.find(o => o.name === model.value);\n                        if(row.attribute!==undefined) row.value = row.attribute.value;\n                    }\n                    \n                    if(model.hasOwnProperty(\"models\")){\n                        row.messages.push(\"model \" + model.key + \" has models\");\n                        map_document(anchor, model.models);\n                    }\n                    \n                    if(model.hasOwnProperty(\"fields\")){\n                        row.messages.push(\"model \" + model.key + \" has fields\");\n                        map_document(anchor, model.fields);\n                    }\n                    \n                    model.rows.push(row);\n                });\n                \n                return model;\n                \n            });\n        }\n\n        return map_document(document, models);\n        /*return maps.map(map=> {\n            \n            if(map.anchor===undefined) map.anchor = document;\n            \n            anchors = Array.from(map.anchor.querySelectorAll(map.selector));\n            \n            return anchors.map((anchor, index, array) => {\n                row = {};\n                \n                row.textContent = `${anchor.textContent}`;\n                row.innerHTML = `${anchor.innerHTML}`;\n                //row.outerHTML = `${anchor.outerHTML}`;\n                row.innerJson = `${anchor.innerHTML}`;\n                \n                if(map.hasOwnProperty(\"selectors\")){\n                    \n                }\n                \n                return row;\n            });\n            \n        });*/\n        \nreturn msg;","outputs":1,"noerr":0,"x":180,"y":640,"wires":[[]]},{"id":"c447469c.b004c8","type":"debug","z":"3393a77f.f5daa8","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","x":950,"y":280,"wires":[]},{"id":"213ec4bd.2f146c","type":"json","z":"3393a77f.f5daa8","name":"","property":"payload.value","action":"","pretty":true,"x":250,"y":160,"wires":[["379763c7.beda6c"]]},{"id":"379763c7.beda6c","type":"function","z":"3393a77f.f5daa8","name":"query Selectors","func":"'use strict';\n\nmsg.topic = \"1betpro\";\n\n//For Debuging with injection and without kafka\nif(msg.payload.value!==undefined){\n    msg.payload = msg.payload.value;\n}\nelse{\n    msg.payload.value = msg.payload;\n}\n//End Debugging\n\nconst puppeteer = global.get('puppeteer');\n\n(async() => {\n    const browser = await puppeteer.launch({args: msg.payload.value.browser_args});\n    const page = await browser.newPage();\n    \n    await page.goto(msg.payload.value.url);\n    \n    await page.type(msg.payload.value.username_selector, msg.payload.value.username);\n    await page.type(msg.payload.value.password_selector, msg.payload.value.password);\n    \n    await page.waitForSelector(msg.payload.value.login_button_selector);\n    \n    await page.click(msg.payload.value.login_button_selector);\n    \n    await page.waitForSelector(msg.payload.value.logout_user_selector);\n    \n    await page.goto(msg.payload.value.next_url);\n    \n    await page.waitForSelector(msg.payload.value.wait_for_selector);\n    \n    /*result = await page.evaluate(async (queries) => {\n      new Promise((resolve, reject) => {\n        try {\n\n            queries.filter(query => query.enabled).map(query => {\n                \n                attributes = function (e){\n                    return Array.from(e.attributes).map(attribute => ({name: attribute.name, value: attribute.value}))\n                }\n                \n                query.result = Array.from(document.querySelectorAll(query.selector)).map(eval(query.pageFunction));\n                return query;\n            });\n\n            if(queries.length>0) resolve();\n            \n        } catch (error) {\n            console.log(\"error!!!!\")\n          reject(error);\n        }\n      }).catch(error => {\n        console.log(\"error!!!!\") // add catch here\n        //console.error(error) // add catch here\n      })\n    }, msg.payload.value.queries);\n    */\n    \n    result = await page.evaluate(queries, node => {\n        \n        var attributes = function (e){\n            \n            result = Array.from(e.attributes).map(attribute => ({name: attribute.name, value: attribute.value}))\n            result.push({name: 'innerText', value: e.innerText});\n            result.push({name: 'innerHTML', value: e.innerHTML});\n            result.push({name: 'outerHTML', value: e.outerHTML});\n            \n            return result;\n        }\n        \n        var groupBy = function(xs, key) {\n            return xs.reduce(function(rv, x) {\n                (rv[x[key]] = rv[x[key]] || []).push(x);\n                return rv;\n            }, {});\n        };\n            \n        var select = function(e, queries) {\n            \n            if(e.document===undefined) e.document = document;\n            \n            return queries.filter(query => query.enabled).map(query => {\n        \n                query.result =[];\n                \n                try{\n                    \n                    if(query.selector!==undefined){\n                        \n                        query.selected = true;\n                        query.result = Array.from(e.document.querySelectorAll(query.selector));\n\n                        if(query.result.length>0 && query.transform!==undefined){\n                            \n                            query.transformed = true;\n                            query.result.map(eval(query.transform));\n                            \n                            if((query.queries!==undefined || e.key!==undefined ) && query.result.length>0){\n                        \n                                query.result.map(child => {\n                                    \n                                    child.parent = (e.key!==undefined) ? e.key : null;\n                                    if(query.queries!==undefined && query.result.length>0) select(child, query.queries);\n                                    \n                                });\n                            }\n                        }\n                    }\n                \n                    node.send({\n                        topic : \"QUERY_RESULTS_RETURNED\",\n                        payload: query,\n                        timestamp: new Date().toISOString()\n                    });\n                    \n                }\n                catch(error){\n                    console.error(error);\n                    query.error = error.message;\n                }\n                \n                return query;\n            })\n            \n        }\n        \n        return select({}, queries);\n        \n    },msg.payload.value.queries, node);\n    \n    \n    //Array.from(e.attributes).map(attribute => ({name: attribute.name, value: attribute.value}))\n    msg.payload = result;\n    /*msg.payload = await page.evaluate({\n        return Array.from(document.querySelectorAll(results_selector));\n    });*/\n    \n    msg.topic = msg.topic + \"_extracted\";\n\n    node.send(msg);\n    \n        \n    \n\n    await browser.close();\n\n})();","outputs":1,"noerr":0,"x":460,"y":160,"wires":[["e2a10dd1.2ca6c"]]},{"id":"81d78f27.b8d3e","type":"kafka consumer","z":"3393a77f.f5daa8","name":"1betpro","zk":"zookeeper-zookeeper.default.svc.cluster.local:2181","topics":"1betpro","consumerGroupId":"","autoCommit":"","kafkaEncoding":"utf8","x":90,"y":160,"wires":[["213ec4bd.2f146c"]]},{"id":"757d1152.a7336","type":"kafka producer","z":"3393a77f.f5daa8","name":"1betpro_finished","zk":"zookeeper-zookeeper.default.svc.cluster.local:2181","topics":"1betpro_finished","kafkaClientId":"","zkSessionTimeout":"","zkSpinDelay":"","zkRetries":"","noAckBatchSize":"","noAckBatchAge":"","requireAcks":"","ackTimeoutMs":"","partitionerType":"","x":1070,"y":660,"wires":[]},{"id":"5c72fd17.6c3944","type":"kafka consumer","z":"3393a77f.f5daa8","name":"1betpro_finished","zk":"zookeeper-zookeeper.default.svc.cluster.local:2181","topics":"1betpro_finished","consumerGroupId":"","autoCommit":"","kafkaEncoding":"utf8","x":120,"y":280,"wires":[["7c1e4142.26d2d"]]},{"id":"7c1e4142.26d2d","type":"json","z":"3393a77f.f5daa8","name":"","property":"payload.value","action":"","pretty":true,"x":490,"y":280,"wires":[["c447469c.b004c8"]]},{"id":"ad6a50de.0c943","type":"inject","z":"3393a77f.f5daa8","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":100,"y":80,"wires":[["382c15f8.0078aa"]]},{"id":"382c15f8.0078aa","type":"function","z":"3393a77f.f5daa8","name":"prepare 1betpro message","func":"msg = {\n    topic : '1betpro',\n    payload : {\n        browser_args: ['--no-sandbox', '--disable-setuid-sandbox', '--shm-size=1gb', '--disable-dev-shm-usage'],\n        url: 'https://1betpro.com/',\n        username: 'Tal1234',\n        password: '1111',\n        username_selector: '#form > div:nth-child(2) > input',\n        password_selector: '#form > div:nth-child(3) > input',\n        login_button_selector: '#form > input',\n        logout_user_selector: '#logout_user',\n        next_url: 'https://1betpro.com/live/',\n        wait_for_selector: '#select_type_bet > a.Active',\n        results_selector : '.live_lines',//'tr.bets_lines td',\n        queries:[{\n                selector: \".live_lines\",\n                transform : \"e => ({ document: e, key: 'live_lines'})\",\n                args: [],\n                enabled: true,\n                queries:[{\n                    selector: \".live_lines div[league_id]\",\n                    transform : \"e => ({document: e, type: 'league', key: attributes(e).filter(attribute => attribute.name === 'league_id')[0].value})\",\n                    args: [],\n                    enabled: true,\n                    queries:[{\n                        selector: \".teams\",\n                        transform : \"(e ,index) => ({type :'line.team', number: Math.floor(index / 3), team: e.innerText, index :index})\",\n                        args: [],\n                        enabled: true            \n                    },{\n                        selector: \".bets_lines\",\n                        transform : \"(e ,index) => ({type :'line.bet', number: Math.floor(index / 3), row: e.innerText, index :index})\",\n                        args: [],\n                        enabled: true\n                    }]\n                }],\n            },{\n                selector: \".live_lines div[league_id]\",\n                pageFunction : \"e => ({type: 'league', innerHTML: e.innerHTML, key: attributes(e).filter(attribute => attribute.name === 'league_id')[0].value})\",\n                args: [],\n                enabled: false,\n                queries:[{\n                    selector: \".teams\",\n                    pageFunction : \"(e ,index) => ({type :'line.team', number: Math.floor(index / 3), team: e.innerText, league_id: e.parent.key, index :index})\",\n                    //filter: \"line => line.index % 3 === 0\",\n                    groupBy: 'number',\n                    args: [],\n                    enabled: false            \n                },{\n                    selector: \".bets_lines\",\n                    pageFunction : \"(e ,index) => ({type :'line.bet', number: Math.floor(index / 3), row: e.innerText, league_id: e.parent, index :index})\",\n                    groupBy: 'number',\n                    args: [],\n                    enabled: false\n                }]\n            },{\n                selector: \".live_lines > table .head_line_bottom b\",\n                pageFunction : \"e => ({type: 'league', name: e.innerText})\",\n                args: [],\n                enabled: false\n            },{\n                selector: \".live_lines > div[league_id] .bets_lines\",\n                pageFunction : \"(e ,index) => ({type :'line', row: e.innerText.split('\\\\t')[0], index :index})\",\n                groupBy: 'number',\n                args: [],\n                enabled: false\n            },{\n                selector: \".live_lines > div[league_id] .teams\",\n                pageFunction : \"(e ,index) => ({type :'line.team', number: Math.floor(index / 3), team: e.innerText, league_id: attributes(e).filter(attribute => attribute.name === 'league_id')[0].value,index :index})\",\n                //filter: \"line => line.index % 3 === 0\",\n                groupBy: 'number',\n                args: [],\n                enabled: false            \n            }],\n        models: \n            [{\n                key : \"LiveLine\",\n                selector: \".live_lines\",\n                value: \"outerHTML\",\n                models: [{\n                    key : \"League\",\n                    selector : \"div[league_id]\",\n                    value: \"league_id\",\n                    fields: [{\n                        key : \"name\",\n                        selector : \".head_line_bottom b\",\n                        value: \"textContent\"\n                    }]\n                }]\n            }],\n        reduce_selector : '.head_line_bottom b',\n        finish_topic_suffix : \"_finished\",\n        _time : msg.payload,\n        time  : new Date(msg.payload).toISOString()\n    }\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":510,"y":80,"wires":[["379763c7.beda6c"]]},{"id":"58910ee.ea485f","type":"kafka producer","z":"3393a77f.f5daa8","name":"1betpro","zk":"zookeeper-zookeeper.default.svc.cluster.local:2181","topics":"1betpro","kafkaClientId":"","zkSessionTimeout":"","zkSpinDelay":"","zkRetries":"","noAckBatchSize":"","noAckBatchAge":"","requireAcks":"","ackTimeoutMs":"","partitionerType":"","x":920,"y":80,"wires":[]},{"id":"e2a10dd1.2ca6c","type":"switch","z":"3393a77f.f5daa8","name":"1betpro","property":"topic","propertyType":"msg","rules":[{"t":"eq","v":"1betpro_extracted","vt":"str"},{"t":"eq","v":"QUERY_RESULTS_RETURNED","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":620,"y":160,"wires":[["c447469c.b004c8"],["c447469c.b004c8"]]},{"id":"7bdfc74d.2fdf88","type":"function","z":"3393a77f.f5daa8","name":"Aggregate","func":"const fixed_number_of_total_td_in_tr = 10;\nconst start_from_td = 2;\nanchors = msg.payload;\n\naggregated_rows = [];\n\nfor (i = start_from_td; i < anchors.length; i+fixed_number_of_total_td_in_tr) {\n    \n    try{\n        const anchor = anchors[i];\n        \n        row = {};\n        \n        row.team  = (anchor.innerHTML.lenght>0) ? anchor.innerHTML.split(\"</\")[1].split(\">\")[anchor.innerHTML.split(\"</\")[1].split(\">\").length-1] : null;\n        row.score = (anchor.innerHTML.lenght>0) ? anchor.innerHTML.split(\"</\")[0].split(\">\")[anchor.innerHTML.split(\"</\")[0].split(\">\").length-1] : null;\n          \n        aggregated_rows.push(row); \n    }\n    catch(e){\n        \n    }\n}\n\nmsg = {\n    topic: \"1betpro_aggregated\",\n    payload : aggregated_rows\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":730,"y":640,"wires":[["c447469c.b004c8"]]},{"id":"a27e1bf4.e9e938","type":"catch","z":"3393a77f.f5daa8","name":"","scope":[],"x":100,"y":380,"wires":[["59a3dd80.04c874"]]},{"id":"8c771553.4393f8","type":"json","z":"3393a77f.f5daa8","name":"","property":"payload.value","action":"","pretty":true,"x":470,"y":460,"wires":[["59a3dd80.04c874"]]},{"id":"10ee8c78.54e274","type":"kafka producer","z":"3393a77f.f5daa8","name":"errors","zk":"zookeeper-zookeeper.default.svc.cluster.local:2181","topics":"errors","kafkaClientId":"","zkSessionTimeout":"","zkSpinDelay":"","zkRetries":"","noAckBatchSize":"","noAckBatchAge":"","requireAcks":"","ackTimeoutMs":"","partitionerType":"","x":930,"y":380,"wires":[]},{"id":"ad200e73.bd031","type":"kafka consumer","z":"3393a77f.f5daa8","name":"errors","zk":"zookeeper-zookeeper.default.svc.cluster.local:2181","topics":"errors","consumerGroupId":"","autoCommit":"","kafkaEncoding":"utf8","x":90,"y":460,"wires":[["8c771553.4393f8"]]},{"id":"59a3dd80.04c874","type":"debug","z":"3393a77f.f5daa8","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":920,"y":460,"wires":[]},{"id":"ad303606.520a18","type":"function","z":"3393a77f.f5daa8","name":"query Selectors 1.0","func":"'use strict'; \nmsg.topic = \"1betpro\";\n\nconst puppeteer = global.get('puppeteer');\n\n(async() => {\n    const browser = await puppeteer.launch({args: msg.payload.value.browser_args});\n    const page = await browser.newPage();\n    \n    await page.goto(msg.payload.value.url);\n    \n    await page.type(msg.payload.value.username_selector, msg.payload.value.username);\n    await page.type(msg.payload.value.password_selector, msg.payload.value.password);\n    \n    await page.waitForSelector(msg.payload.value.login_button_selector);\n    \n    await page.click(msg.payload.value.login_button_selector);\n    \n    await page.waitForSelector(msg.payload.value.logout_user_selector);\n    \n    await page.goto(msg.payload.value.next_url);\n    \n    await page.waitForSelector(msg.payload.value.wait_for_selector);\n    \n    // Extract the results from the page.\n    rows = await page.evaluate(results_selector => {\n        \n        //Extract\n        anchors = Array.from(document.querySelectorAll(results_selector));\n        \n        \n        //Transform\n        return anchors.map((anchor, index, array) => {\n            row = {};\n                \n            row.fixed_number_of_total_td_in_tr = 10;\n            row.array_length = array.length;\n            \n            row.index = index;\n            row.event_number = Math.floor(row.index/10);\n            row.textContent = `${anchor.textContent}`;\n            row.innerHTML = `${anchor.innerHTML}`;\n            \n            if(`${anchor.id}`!==\"\"){\n                row.id = `${anchor.id}`;\n                \n                row.team_anchor_index = (row.event_number*10);\n                \n                //team_anchor = array[team_anchor_index];\n                \n                //console.log(team_anchor);\n                \n                //row.team_innerHTML = `${team_anchor.innerHTML}`;\n                \n                row.source = anchor;\n                \n                row.elements = row.innerHTML.split(\"</\");\n                //custom transformation\n                row.id_parts = row.id.split(\"_\");\n                row.part0 = (row.id_parts.length > 0) ? row.id_parts[0] : null;\n                row.part1 = (row.id_parts.length > 1) ? row.id_parts[1] : null;\n                row.part2 = (row.id_parts.length > 2) ? row.id_parts[2] : null;\n                row.part3 = (row.id_parts.length > 3) ? row.id_parts[3] : null;\n                row.part4 = (row.id_parts.length > 4) ? row.id_parts[4] : null;\n                \n                //row.team  = (team_innerHTML.lenght>0) ? team_innerHTML.split(\"</\")[1].split(\">\")[team_innerHTML.split(\"</\")[1].split(\">\").length-1] : null;\n                //row.score = (team_innerHTML.lenght>0) ? team_innerHTML.split(\"</\")[0].split(\">\")[team_innerHTML.split(\"</\")[0].split(\">\").length-1] : null;\n                  \n                row.bet_1x2 = (row.part2===\"02\")? row.textContent : null;\n                \n                row.bet_handicap1 = (row.part2===\"01\")? row.textContent.split(\" \")[0] : null;\n                row.bet_handicap2 = (row.part2===\"01\")? row.textContent.split(\" \")[1] : null;\n                \n                row.bet_over1 = (row.part2===\"03\" && row.textContent.split(\" \")[0]===\"O\")? row.textContent.split(\" \")[1]  : null;\n                row.bet_over2 = (row.part2===\"03\" && row.textContent.split(\" \")[0]===\"O\")? row.textContent.split(\" \")[2]  : null;\n        \n                row.bet_under1 = (row.part2===\"03\" && row.textContent.split(\" \")[0]===\"U\")? row.textContent.split(\" \")[1]  : null;\n                row.bet_under2 = (row.part2===\"03\" && row.textContent.split(\" \")[0]===\"U\")? row.textContent.split(\" \")[2]  : null;\n        \n                //console.log(row);\n            //}\n            //catch(e){\n                \n            //}\n            }\n            \n            return row;\n            \n        });\n    }, msg.payload.value.results_selector);\n  \n    msg.topic = msg.topic + \"_extracted\";\n    \n    msg.payload = await rows.reduce((all, one) =>{\n        \n        if(!Array.isArray(all)){\n            all = [];\n        }\n        \n        result = all[one.event_number];\n        \n        console.log(result);\n        \n        if (result === undefined) {\n            // not found\n            one.all = [];\n            all.splice(one.event_number, 0, one);\n        }  else {\n            // multiple items found\n            result.all.splice(one.event_number, 0, one);\n        }\n        \n        return all;\n    });\n    \n    node.send(msg);\n    //console.log(rows.join('\\n'));\n    //console.log(rows);\n  \n    browser.close();\n})();","outputs":1,"noerr":0,"x":370,"y":560,"wires":[[]]},{"id":"b8ec696.5cb8a98","type":"html","z":"3393a77f.f5daa8","name":"","property":"payload.innerHTML","tag":"","ret":"html","as":"multi","x":790,"y":160,"wires":[["b94e2d3a.8151d"]]},{"id":"b94e2d3a.8151d","type":"debug","z":"3393a77f.f5daa8","name":"","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"payload","x":960,"y":160,"wires":[]},{"id":"b85405d5.194368","type":"function","z":"3393a77f.f5daa8","name":"","func":"//Extract\n        function map_document(doc, models){\n        \n            return models.map(model=> {\n                \n                model.rows = [];\n                \n                anchors = Array.from(doc.querySelectorAll(model.selector));\n                    \n                anchors.forEach((anchor) => {\n                    row = {};\n                    row.messages = [];\n                    \n                    row.key = model.key;\n                    row.selector = model.selector;\n                    \n                    row.attributes = Array.from(anchor.attributes).map(someAt => ({name: someAt.name, value: someAt.value}))\n                    row.attributes.push({name: \"textContent\", value: `${anchor.textContent}`});\n                    row.attributes.push({name: \"innerHTML\", value: `${anchor.innerHTML}`});\n                    row.attributes.push({name: \"outerHTML\", value: `${anchor.outerHTML}`});\n                    row.value = null;\n                    \n                    if(model.hasOwnProperty(\"value\")){\n                        row.messages.push(\"model \" + model.key + \" has value\");\n                        row.attribute = row.attributes.find(o => o.name === model.value);\n                        if(row.attribute!==undefined) row.value = row.attribute.value;\n                    }\n                    \n                    if(model.hasOwnProperty(\"models\")){\n                        row.messages.push(\"model \" + model.key + \" has models\");\n                        map_document(anchor, model.models);\n                    }\n                    \n                    if(model.hasOwnProperty(\"fields\")){\n                        row.messages.push(\"model \" + model.key + \" has fields\");\n                        map_document(anchor, model.fields);\n                    }\n                    \n                    model.rows.push(row);\n                });\n                \n                return model;\n                \n            });\n        }\n\n        return map_document(document, models);\n        /*return maps.map(map=> {\n            \n            if(map.anchor===undefined) map.anchor = document;\n            \n            anchors = Array.from(map.anchor.querySelectorAll(map.selector));\n            \n            return anchors.map((anchor, index, array) => {\n                row = {};\n                \n                row.textContent = `${anchor.textContent}`;\n                row.innerHTML = `${anchor.innerHTML}`;\n                //row.outerHTML = `${anchor.outerHTML}`;\n                row.innerJson = `${anchor.innerHTML}`;\n                \n                if(map.hasOwnProperty(\"selectors\")){\n                    \n                }\n                \n                return row;\n            });\n            \n        });*/\n        \nreturn msg;","outputs":1,"noerr":0,"x":180,"y":640,"wires":[[]]}]